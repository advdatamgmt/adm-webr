{
  "hash": "7c6674e38248bb1e7435c39ea8783c8c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Base Graphics\"\norder: 800\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Evaluation\n\nThe goal of this assignment is to recreate the following plot **exactly** \n(e.g., pay particular attention to the type and color of points and lines \nand the axis labels, etc.) using the provided data described below.  \n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n#| echo: false\nload(\"_static/data/onhlong.rda\")\nload(\"_static/data/onhfit.rda\")\nplot(mean ~ age, data = onhlong, type = \"n\", xlab = \"Age (years)\", ylab = \"Mean optic nerve size (mm)\")\nwith(subset(onhlong, clinhypo == \"No\" & case == 1), points(age, mean, col = \"blue\", pch = 19))\nwith(subset(onhlong, clinhypo == \"Yes\" & case == 1), points(age, mean, col = \"red\", pch = 19))\nwith(subset(onhlong, clinhypo == \"No\" & case == 0), points(age, mean, pch = 19))\nwith(onhfit, lines(age, mean))\nwith(onhfit, lines(age, upr95, lty = 2))\nwith(onhfit, lines(age, lwr95, lty = 2))\n```\n:::\n\n\nThe figure of the caption of the figure should also help you recreate it.\n\n``**Figure. Mean optic nerve size vs. age in patients with optic nerve hypoplasia (ONH) and controls.**  Linear regression of the mean optic nerve size of controls (black points: individual control optic nerve measurements, black line: mean optic nerve size of controls, dashed black lines: 95% prediction intervals of mean optic nerve size of controls).   Red points are measurements of optic nerves with clinical ONH.  Blue points represent the clinically unaffected eye of patients with clinically unilateral ONH.  The contralateral optic nerve of ONH patients was generally smaller than control optic nerves.''\n\nThere are two datasets.  Dataset `onhlong`{.r} contains the individual\nmeasurements on each row.  `case`{.r} tells us whether the patient was a\ncase or not (factor: 1 vs. 0), `clinhypo`{.r} if the nerve was clinically hypoplastic\n(factor: Yes vs. No), `age`{.r} of the subject, and `mean`{.r} the\nmean optic nerve measurement. \n\nTake a look at the first few rows of `onhlong`{.r} below.\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\nhead(onhlong) \n```\n:::\n\n\nDataset `onhfit`{.r} contains predicted\nvalues for the regression line `mean`{.r} and the upper (`upr95`{.r}) and lower\n(`lwr95`{.r}).  Each would be plotted by `onhfit`{.r}'s `age`{.r} variable to \ncreate the lines.\n\nTake a look at all of `onhfit`{.r} below.\n\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\nonhfit\n```\n:::\n\n\nHere are some hints to get you started (replace the `...`{.r}'s with your code):\n\n::: {.cell}\n```{webr}\n#| eval: FALSE\nwith(subset(onhlong, clinhypo == \"No\" & case == 1), points(...))\n```\n:::\n\n\n\n::: {.cell}\n```{webr}\n#| eval: FALSE\nwith(onhfit, lines(...))\n```\n:::\n\n\nFinally, if you are struggling with the plot window x and y limits, remember\nthat they can be set automatically by R based on the data you provide if you \nremember to set `type = \"n\"` in the right place (see the notes we\nwent over in class).\n\n\n::: {.cell caption='Exercise 1' exercise='e1'}\n```{webr}\n#| caption: Exercise 1\n#| exercise: e1\nplot(______)\nwith(subset(______), points(______))\n# additional similar lines to above\nwith(onhfit, lines(______))\n# additional similar lines to above\n```\n:::\n\n\n::: {.solution exercise=\"e1\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e1' solution='true'}\n```{webr}\n#| exercise: e1\n#| solution: true\n#| echo: false\n```\n:::\n\nI'm not going to provide the full solution here. But hopefuly the hints above, the\nfeedback from the autograder, and the class resources will help you get there!\n:::\n:::\n\n\n::: {.cell exercise='e1' check='true'}\n```{webr}\n#| exercise: e1\n#| check: true\ngradethis::grade_this({\n    eval(parse(text = .user_code), env = .envir_prep)\n# get rid of pairlists\npl <- purrr::modify_tree(\n    recordPlot(),\n    is_node = is.list,\n    post = as.list\n)[[1]]\n\nfind_data <- function(x, where_within, data_to_match) {\n    z <- function(x) {\n        where_within[[\".x\"]] <- x\n        isTRUE(all.equal(do.call(purrr::pluck, where_within), data_to_match))\n    }\n    purrr::detect_index(x, z)\n}\n\ncheck_it <- function(msg = \"\", test, add_to = list(msg = \"\", test = TRUE)) {\n    msg = glue::glue(\"{add_to$msg}<br>{msg}: \", if (test) \"✅\" else \"❌\")\n    list(msg = msg, test = test && add_to$test)\n}\n\ncheck_plot_window <- function(\n    add_to = list(msg = \"\", test = TRUE),\n    plot_list = pl\n) {\n    line_number <- find_data(plot_list, list(2, 1, \"name\"), \"C_plot_window\")\n    out <- check_it(\n        paste0(\"plot window found\"),\n        line_number != 0,\n        add_to\n    )\n    if (line_number == 0) {\n        return(out)\n    }\n    plot_window <- purrr::pluck(plot_list, line_number, 2)\n    out <- check_it(\n        \"-- x limits correct\",\n        isTRUE(all.equal(\n            purrr::pluck(plot_window, 2),\n            c(0.125, 17.000)\n        )),\n        out\n    )\n    out <- check_it(\n        \"-- y limits correct\",\n        isTRUE(all.equal(\n            purrr::pluck(plot_window, 3),\n            c(0.62, 3.82)\n        )),\n        out\n    )\n    out <- check_it(\n        \"-- log not set\",\n        purrr::pluck(plot_window, 4) == \"\",\n        out\n    )\n    out <- check_it(\n        \"-- aspect ratio correct\",\n        is.na(purrr::pluck(plot_window, 5)),\n        out\n    )\n    out\n}\n\ncheck_axis_labels <- function(\n    add_to = list(msg = \"\", test = TRUE),\n    plot_list = pl\n) {\n    line_number <- find_data(plot_list, list(2, 1, \"name\"), \"C_title\")\n    out <- check_it(\n        paste0(\"axis labels found\"),\n        line_number != 0,\n        add_to\n    )\n    if (line_number == 0) {\n        return(out)\n    }\n    plot_window <- purrr::pluck(plot_list, line_number, 2)\n    out <- check_it(\n        \"-- x label correct\",\n        purrr::pluck(plot_window, 4) == \"Age (years)\",\n        out\n    )\n    out <- check_it(\n        \"-- y label correct\",\n        purrr::pluck(plot_window, 5) == \"Mean optic nerve size (mm)\",\n        out\n    )\n    out\n}\n\ncheck_xy <- function(\n    add_to = list(msg = \"\", test = TRUE),\n    index = 0,\n    desc = \"\",\n    x = numeric(0),\n    y = numeric(0),\n    type = \"p\",\n    pch = 1,\n    lty = list(1, \"solid\"),\n    col = \"black\",\n    bg = NA,\n    cex = 1,\n    lwd = 1,\n    plot_list = pl\n) {\n    out <- check_it(\n        desc,\n        index != 0,\n        add_to\n    )\n    if (index == 0) {\n        return(out)\n    }\n    point_obj <- purrr::pluck(plot_list, index, 2)\n    purrr::pmap(\n        list(\n            name = c(\"x\", \"y\", \"type\", \"pch\", \"lty\", \"col\", \"bg\", \"cex\", \"lwd\"),\n            str = c(\n                \"x values correct\",\n                \"y values correct\",\n                \"type (e.g., points vs. line) correct\",\n                \"point type (pch) correct\",\n                \"line type (lty) correct\",\n                \"color (col) correct\",\n                \"background color (bg) correct\",\n                \"size/magnification (cex) correct\",\n                \"line width (lwd) correct\"\n            ),\n            loc = list(list(2, \"x\"), list(2, \"y\"), 3, 4, 5, 6, 7, 8, 9),\n            test = list(\n                function(x, y) isTRUE(all.equal(x, y)),\n                function(x, y) isTRUE(all.equal(x, y)),\n                `==`,\n                `==`,\n                `%in%`,\n                function(x, y) {\n                    isTRUE(all.equal(\n                        col2rgb(x),\n                        col2rgb(y)\n                    ))\n                },\n                function(x, y) {\n                    isTRUE(all.equal(\n                        col2rgb(x),\n                        col2rgb(y)\n                    ))\n                },\n                `==`,\n                `==`\n            )\n        ),\n        function(name, str, loc, test) {\n            x = do.call(purrr::pluck, c(list(point_obj), loc))\n            y = get(name)\n            out <<- check_it(\n                paste0(\"-- \", str),\n                do.call(test, list(x, y)),\n                out\n            )\n        }\n    )\n    out\n}\n\ncheck_line <- function(\n    add_to = list(msg = \"\", test = TRUE),\n    ..., plot_list = pl\n) {\n    dots <- list(...)\n    dots$add_to <- add_to\n    dots$type = \"l\"\n    dots$index <- find_data(plot_list, list(2, 2, \"y\"), dots$y)\n    dots$desc <- paste0(\"line for \", dots$desc, \" found\")\n    do.call(check_xy, dots)\n}\n\ncheck_points <- function(\n    add_to = list(msg = \"\", test = TRUE),\n    ..., plot_list = pl\n) {\n    dots <- list(...)\n    dots$add_to <- add_to\n    dots$index <- find_data(plot_list, list(2, 2, \"y\"), dots$y)\n    dots$desc <- paste0(\"points for \", dots$desc, \" found\")\n    point_number <- find_data(plot_list, list(2, 2, \"y\"), dots$y)\n    do.call(check_xy, dots)\n}\n\ncheck_plot_window() %>%\n    check_points(\n        desc = \"points for normal optic nerves\",\n        x = subset(onhlong, clinhypo == \"No\" & case == 0)$age,\n        y = subset(onhlong, clinhypo == \"No\" & case == 0)$mean,\n        pch = 19,\n        col = \"black\"\n    ) %>%\n    check_points(\n        desc = \"points for clinically unaffected optic nerves among patients with ONH\",\n        x = subset(onhlong, clinhypo == \"No\" & case == 1)$age,\n        y = subset(onhlong, clinhypo == \"No\" & case == 1)$mean,\n        pch = 19,\n        col = \"blue\"\n    ) %>%\n    check_points(\n        desc = \"points for clinically affected optic nerves with clinical ONH\",\n        x = subset(onhlong, clinhypo == \"Yes\" & case == 1)$age,\n        y = subset(onhlong, clinhypo == \"Yes\" & case == 1)$mean,\n        pch = 19,\n        col = \"red\"\n    ) %>%\n    check_line(\n        desc = \"mean\",\n        x = onhfit$age,\n        y = onhfit$mean\n    ) %>%\n    check_line(\n        desc = \"upper 95% prediction interval\",\n        x = onhfit$age,\n        y = onhfit$upr95,\n        lty = list(2, \"dashed\")\n    ) %>%\n    check_line(\n        desc = \"lower 95% prediction interval\",\n        x = onhfit$age,\n        y = onhfit$lwr95,\n        lty = list(2, \"dashed\")\n    ) %>%\n    check_axis_labels() -> out\n\nif (out$test) {\n    gradethis::pass(out$msg)\n} else {\n    gradethis::fail(out$msg)\n}\n})\n```\n:::\n\n\n### Submit Your Assignment\n\n\n::: {.cell type='progress-submit'}\n```{adm}\n#| type: progress-submit\n```\n:::\n\n::: {#adm-progress-submit}\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n.progress_submit(\"08-Base-Graphics\", 1)\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}