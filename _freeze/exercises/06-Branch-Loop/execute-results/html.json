{
  "hash": "cb9e35db4bd034ade79a71994066b5a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Branching Out & Feeling Loopy\"\norder: 600\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Exposition\n\nIn the [last lesson](05-Functions.qmd) we had an introduction to functions, \na way to encapsulate pieces of R code such that we can substitute different\nvalues (arguments) into that code and apply that \"recipe\" to a set of\narbitrary values. However, what if we need the program to \"think\",\ni.e., make decisions about what to do? What if we need to do\nsomething many, many times: ten times, one hundred times, a million\ntimes? \n\nYes, our function might be easier to write than the code it\nruns, but you still don’t want to write your function out that many\ntimes. This lesson begins to address both of these problems.\n\nControl structures guide the flow of your program. The first group of\ncontrol structures we will consider are *branch* control structures.\nThey are called branch structures because they place a \"fork in the\nroad\" for your program and provide a way for your program to \"think\".\n\n### Branch structures\n\n#### If-else \n\nThe first control structure to look at is `if`{.r}. Start by assigning `5`{.r} to `x`{.r} so that we have something to work with.\n\n\n::: {.cell caption='Exercise 1' exercise='e1' envir='env1'}\n```{webr}\n#| caption: Exercise 1\n#| exercise: e1\n#| envir: env1\n```\n:::\n\n\n::: {.solution exercise=\"e1\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e1' solution='true'}\n```{webr}\n#| exercise: e1\n#| solution: true\nx <- 5\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e1' check='true'}\n```{webr}\n#| exercise: e1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow, read the code carefully below and then run it to see what happens.\n\n\n::: {.cell caption='Exercise 2' exercise='e2' envir='env1'}\n```{webr}\n#| caption: Exercise 2\n#| exercise: e2\n#| envir: env1\nif (x > 3) { \"x is greater than 3\" }\n```\n:::\n\n\n::: {.solution exercise=\"e2\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e2' solution='true'}\n```{webr}\n#| exercise: e2\n#| solution: true\nif (x > 3) { \"x is greater than 3\" }\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e2' check='true'}\n```{webr}\n#| exercise: e2\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n::: {.cell exercise='e2' type='open-on-pass'}\n```{adm}\n#| exercise: e2\n#| type: open-on-pass\nAs you could see, R returns the `character`{.r} vector (length 1) that\n`\"x is greater than 3\"`{.r} because `x`{.r} is `5`{.r} which\nis greater than `3`{.r}.  Thus, R ran the code in the brackets.\nJust as with a function, R returned the last thing, in this case the\nonly thing, executed inside the brackets.\n```\n:::\n\n\nNow look at this code; it is similar but not exactly the same as the code above.\nWhat do you think will happen when you run it?  Try it after you have thought \nabout it.\n\n\n::: {.cell caption='Exercise 3' exercise='e3' envir='env1'}\n```{webr}\n#| caption: Exercise 3\n#| exercise: e3\n#| envir: env1\nif (x > 10) { \"x is greater than 10\" }\n```\n:::\n\n\n::: {.solution exercise=\"e3\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e3' solution='true'}\n```{webr}\n#| exercise: e3\n#| solution: true\nif (x > 10) { \"x is greater than 10\" }\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e3' check='true'}\n```{webr}\n#| exercise: e3\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nDid R return anything?  No, because `x`{.r} is `5`{.r} which is not greater \nthan `10`{.r}, So, R just skipped the block of code in those curly braces.\nYou can add an `else`{.r} to provide an alternative block of code to\nexecute if the expression in the parentheses following the\nkeyword `if` is not `TRUE`{.r} .\n\nExamine the following code, think about what it should do,\nand when you are done, run it to see if you are correct!\n\n\n\n::: {.cell caption='Exercise 4' exercise='e4' envir='env1'}\n```{webr}\n#| caption: Exercise 4\n#| exercise: e4\n#| envir: env1\nif (x > 10) {  \n    \"x is greater than 10\" \n} else { \n    \"x is not greater than 10\" \n}\n```\n:::\n\n\n::: {.solution exercise=\"e4\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e4' solution='true'}\n```{webr}\n#| exercise: e4\n#| solution: true\nif (x > 10) {\n  \"x is greater than 10\"\n} else {\n  \"x is not greater than 10\"\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e4' check='true'}\n```{webr}\n#| exercise: e4\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nThe output should make sense I hope. You can also chain `if`{.r}-`else`{.r} \nstatements together. Examine the following code. \nThink about what will happen, then run it:\n\n\n::: {.cell caption='Exercise 5' exercise='e5' envir='env1'}\n```{webr}\n#| caption: Exercise 5\n#| exercise: e5\n#| envir: env1\nif (x > 10) {\n  \"x is greater than 10\"\n} else if (x > 4) {\n  \"x is greater than 4\"\n} else {\n  \"x is less than or equal to 4\"\n}\n```\n:::\n\n\n::: {.solution exercise=\"e5\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e5' solution='true'}\n```{webr}\n#| exercise: e5\n#| solution: true\nif (x > 10) {\n  \"x is greater than 10\"\n} else if (x > 4) {\n  \"x is greater than 4\"\n} else {\n  \"x is less than or equal to 4\"\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e5' check='true'}\n```{webr}\n#| exercise: e5\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n#### Switch \n\nNow, let's try out a different branching structure, i.e., a `switch`{.r} statement \nwhich I placed in a function called `center`{.r}.  As you can see the function\n`center`{.r} takes two arguments, `x`{.r} and `type`{.r}. The argument\n`x`{.r} is the `numeric`{.r} vector to be summarized and `type`{.r} is a\n`character`{.r} vector that indicates which summary statistic to compute with a\ndefault of `\"mean\"`{.r}.  Examine the code below and think about what it does.\nWhen you are ready, run it.\n\n\n::: {.cell caption='Exercise 6' exercise='e6' envir='env2'}\n```{webr}\n#| caption: Exercise 6\n#| exercise: e6\n#| envir: env2\ncenter <- function(x, type = \"mean\") {\n  switch(type,\n    mean = mean(x),\n    median = median(x),\n    trim = mean(x, trim = 0.1)\n  )\n}\n```\n:::\n\n\n::: {.solution exercise=\"e6\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e6' solution='true'}\n```{webr}\n#| exercise: e6\n#| solution: true\ncenter <- function(x, type = \"mean\") {\n  switch(type,\n    mean = mean(x),\n    median = median(x),\n    trim = mean(x, trim = 0.1)\n  )\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e6' check='true'}\n```{webr}\n#| exercise: e6\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nHopefully you aren't suprised that the code above doesn't produce any output as\nwe were merely assigning a function to the name `center`{.r}.  Let's take\nthe new function for a spin.\n\nI've defined `d` as follows:\n\n::: {.cell autorun='true' edit='false' envir='global'}\n```{webr}\n#| autorun: true\n#| edit: false\n#| envir: global\nd <- c(-0.5, -0.6,  0.9,  0.2,  1.1,  1.5, -0.5,  0.3, -2.3,  0.7)\n```\n:::\n\n\nTry it using the following R code: `center(d, \"mean\")`{.r}\n\n\n::: {.cell caption='Exercise 7' exercise='e7' envir='env2'}\n```{webr}\n#| caption: Exercise 7\n#| exercise: e7\n#| envir: env2\n```\n:::\n\n\n::: {.solution exercise=\"e7\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e7' solution='true'}\n```{webr}\n#| exercise: e7\n#| solution: true\ncenter(d, \"mean\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e7' check='true'}\n```{webr}\n#| exercise: e7\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow `center(d, \"median\")`{.r}.\n\n\n::: {.cell caption='Exercise 8' exercise='e8' envir='env2'}\n```{webr}\n#| caption: Exercise 8\n#| exercise: e8\n#| envir: env2\n```\n:::\n\n\n::: {.solution exercise=\"e8\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e8' solution='true'}\n```{webr}\n#| exercise: e8\n#| solution: true\ncenter(d, \"median\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e8' check='true'}\n```{webr}\n#| exercise: e8\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNext `center(d, \"trim\")`{.r}\n\n\n::: {.cell caption='Exercise 9' exercise='e9' envir='env2'}\n```{webr}\n#| caption: Exercise 9\n#| exercise: e9\n#| envir: env2\n```\n:::\n\n\n::: {.solution exercise=\"e9\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e9' solution='true'}\n```{webr}\n#| exercise: e9\n#| solution: true\ncenter(d, \"trim\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e9' check='true'}\n```{webr}\n#| exercise: e9\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nFinally, try your function on `d`{.r} without specifying the second \nargument: `center(d)`{.r}\n\n\n::: {.cell caption='Exercise 10' exercise='e10' envir='env2'}\n```{webr}\n#| caption: Exercise 10\n#| exercise: e10\n#| envir: env2\n```\n:::\n\n\n::: {.solution exercise=\"e10\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e10' solution='true'}\n```{webr}\n#| exercise: e10\n#| solution: true\ncenter(d)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e10' check='true'}\n```{webr}\n#| exercise: e10\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nDid you get the answer you expected, i.e., the same as `center(d, \"mean\")`{.r}?\nHopefully so!\n\n### Loop structures\n\n#### For loops\n\nThe `for`{.r} loop control structure allows you to iterate over a `vector`{.r} \nor `list`{.r}. Type in and try this R code:\n\n```{.r}\nfor (x in 10:1) { print(x) }\n```\n\n\n::: {.cell caption='Exercise 11' exercise='e11' envir='env3'}\n```{webr}\n#| caption: Exercise 11\n#| exercise: e11\n#| envir: env3\n```\n:::\n\n\n::: {.solution exercise=\"e11\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e11' solution='true'}\n```{webr}\n#| exercise: e11\n#| solution: true\nfor (x in 10:1) { print(x) }\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e11' check='true'}\n```{webr}\n#| exercise: e11\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nThe `print`{.r} function prints the value in `x`{.r} at that time.  In this case \nof a loop, nothing is returned (unless you assign it somewhere \nas we'll see later), so we need the `print`{.r} function to show us \nwhat is going on.\n\nRead the `for` loop as \"for each element in the vector `10:1`{.r} \ncall it `x`{.r} temporarily and do what is inside the curly brackets.\nRecall `10:1`{.r} is shorthand for `c(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)`{.r}.\n\nNow, I've already defined the list `l`{.r} as:\n\n\n::: {.cell autorun='true' edit='false' envir='global'}\n```{webr}\n#| autorun: true\n#| edit: false\n#| envir: global\nl <- list(a = c(3, 4, 5), b = c(\"dogs\", \"cats\"))\n```\n:::\n\n\nSee what happens when you iterate over the object `l` like this (be careful\nwith the \"ell\" vs. \"one\" distinction!):\n```{.r}\nfor (x in l) { print(x[1]) }\n```\n\n\n::: {.cell caption='Exercise 12' exercise='e12' envir='env3'}\n```{webr}\n#| caption: Exercise 12\n#| exercise: e12\n#| envir: env3\n```\n:::\n\n\n::: {.solution exercise=\"e12\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e12' solution='true'}\n```{webr}\n#| exercise: e12\n#| solution: true\nfor (x in l) { print(x[1]) }\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e12' check='true'}\n```{webr}\n#| exercise: e12\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nAs you see it took each element of `l`{.r}, i.e., `a`{.r} and then `b`{.r}, and \nassigned it temporarily to `x`{.r} and printed the first value of each element.\n\n#### While loops\n\nA `while`{.r} loop keeps doing something while the condition is `TRUE`{.r}. \nStudy and run this code:\n\n\n::: {.cell caption='Exercise 13' exercise='e13'}\n```{webr}\n#| caption: Exercise 13\n#| exercise: e13\ni <- 10\nwhile (i > 0) {\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n\n::: {.solution exercise=\"e13\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e13' solution='true'}\n```{webr}\n#| exercise: e13\n#| solution: true\ni <- 10\nwhile (i > 0) {\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e13' check='true'}\n```{webr}\n#| exercise: e13\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nIf you aren’t careful, you could write a loop that never ends. \nStudy and try this code to see what happens:\n\n\n::: {.cell caption='Exercise 14' exercise='e14' timelimit='0.1'}\n```{webr}\n#| caption: Exercise 14\n#| exercise: e14\n#| timelimit: 0.1\ni <- 1\nwhile (i > 0) {\n  print(i)\n  i <- i + 1\n}\n```\n:::\n\n\n::: {.solution exercise=\"e14\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e14' solution='true'}\n```{webr}\n#| exercise: e14\n#| solution: true\n```\n:::\n\n\n```{.r}\ni <- 1\nwhile (i > 0) {\n  print(i)\n  i <- i + 1\n}\n```\n:::\n:::\n\n\n::: {.cell exercise='e14' check='true'}\n```{webr}\n#| exercise: e14\n#| check: true\ngradethis::grade_this(pass())\n```\n:::\n\n\n`<btn type=\"button\" class=\"btn progress-continue\">Continue</btn>`{=html}\n\nI stopped that code after about a tenth of a second because otherwise it \nwould have run forever!  (Computers count really fast!) \nThe condition `i > 0`{.r} is always `TRUE`{.r} when \nI start from `1`{.r} and keep adding `1`{.r} to it!  When you are in RStudio\nyou can stop the execution of code by clicking the red stop button in the upper\nright corner of the Console pane or by pressing the <kbd>Esc</kbd> key.\n\nTwo reserved words permit further control of loops: `break`{.r} and `next`{.r}.\nWhen used within a loop (either a `for`{.r} or `while`{.r} loop), they allow \nyou to completely break out of the loop and continue further along your program \n(i.e., `break`{.r}) or to skip the rest of the current loop and start the next \none (i.e., `next`{.r}). They can help with tricky situations.\n\nTry running this example using `break`{.r}:\n\n\n::: {.cell caption='Exercise 15' exercise='e15'}\n```{webr}\n#| caption: Exercise 15\n#| exercise: e15\ni <- 10\nwhile(TRUE) {\n  if(i == 0) break;\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n\n::: {.solution exercise=\"e15\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e15' solution='true'}\n```{webr}\n#| exercise: e15\n#| solution: true\ni <- 10\nwhile(TRUE) {\n  if(i == 0) break;\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e15' check='true'}\n```{webr}\n#| exercise: e15\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nAbove is an trivial example of using `break`{.r}.  Here we just used `TRUE`{.r} \nas the `while`{.r} condition.  Thus, it would be an infinite loop were it\nnot for the use of `break`{.r}. \n\nNow study  this example that also uses `next`{.r} in a trivial way\njust to illustrate the concepts we are learning. See if you can figure out\nwhat it will do.  Just go step by step; write down what `i`{.r} is as you go\nstep by step and figure out what will be printed out.  Then, run the code\nand see if you were right! \n\n\n::: {.cell caption='Exercise 16' exercise='e16'}\n```{webr}\n#| caption: Exercise 16\n#| exercise: e16\ni <- 20\nwhile(TRUE) {\n  if(i < 5) break;\n  if(i %% 2) {\n    i <- i - 1\n    next; # go to next iteration if odd\n  }\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n\n::: {.solution exercise=\"e16\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e16' solution='true'}\n```{webr}\n#| exercise: e16\n#| solution: true\ni <- 20\nwhile(TRUE) {\n  if(i < 5) break;\n  if(i %% 2) {\n    i <- i - 1\n    next; # go to next iteration if odd\n  }\n  print(i)\n  i <- i - 1\n}\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e16' check='true'}\n```{webr}\n#| exercise: e16\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n\n::: {.cell exercise='e16' type='open-on-pass'}\n```{adm}\n#| exercise: e16\n#| type: open-on-pass\nDid you get it?  Review it more if not, also think about how to rewrite\nit so that the `while`{.r} loop works just the same without using either \n`break`{.r} or `next`{.r}.  We will discuss in class.\n```\n:::\n\n\n### The ifelse function\n\nThe `ifelse` function is a vectorized way of applying an `if`{.r}-`else`{.r} \nlogic.  It is technically not a control structure because it does not\nchange the flow of your program, but it is very useful and\nsimilar in concept to `if`{.r}-`else`{.r}. \nIt is very useful for making decisions on each item in a vector or each row in \na `data.frame`{.r}.\n\nI've defined `y` as follows:\n\n::: {.cell autorun='true' edit='false' envir='global'}\n```{webr}\n#| autorun: true\n#| edit: false\n#| envir: global\ny <- c(5, 0, 6, 8, 9, 7, 3, 4, 4, 7)\n```\n:::\n\n\nNow type and run this R code:\n\n```{.r}\nifelse(y == 7, \"seven\", \"not seven\")\n```\n\n\n::: {.cell caption='Exercise 17' exercise='e17' envir='env5'}\n```{webr}\n#| caption: Exercise 17\n#| exercise: e17\n#| envir: env5\n```\n:::\n\n\n::: {.solution exercise=\"e17\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e17' solution='true'}\n```{webr}\n#| exercise: e17\n#| solution: true\nifelse(y == 7, \"seven\", \"not seven\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e17' check='true'}\n```{webr}\n#| exercise: e17\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nTry this R code to check for even numbers:\n\n```{.r}\nifelse(y %% 2 == 0, \"even\", \"odd\")\n```\n\n\n::: {.cell caption='Exercise 18' exercise='e18' envir='env5'}\n```{webr}\n#| caption: Exercise 18\n#| exercise: e18\n#| envir: env5\n```\n:::\n\n\n::: {.solution exercise=\"e18\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e18' solution='true'}\n```{webr}\n#| exercise: e18\n#| solution: true\nifelse(y %% 2 == 0, \"even\", \"odd\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e18' check='true'}\n```{webr}\n#| exercise: e18\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou don't have to return a `character`{.r} vector.  Try this R code to return\n`0`{.r} for even numbers and `1`{.r} for odd numbers:\n\n```{.r}\nifelse(y %% 2 == 0, 0, 1)\n```\n\n\n::: {.cell caption='Exercise 19' exercise='e19' envir='env5'}\n```{webr}\n#| caption: Exercise 19\n#| exercise: e19\n#| envir: env5\n```\n:::\n\n\n::: {.solution exercise=\"e19\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e19' solution='true'}\n```{webr}\n#| exercise: e19\n#| solution: true\nifelse(y %% 2 == 0, 0, 1)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e19' check='true'}\n```{webr}\n#| exercise: e19\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nHere is a fun one using a new operator, the `%in%`{.r} operator.  You will find\nthis operator is useful in many situations and can use it in other places\nthan just inside an `ifelse`{.r} function call:\n\n```{.r}\nifelse(y %in% c(7, 4, 0), \"in\", \"out\")\n```\n\n\n::: {.cell caption='Exercise 20' exercise='e20'}\n```{webr}\n#| caption: Exercise 20\n#| exercise: e20\n```\n:::\n\n\n::: {.solution exercise=\"e20\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e20' solution='true'}\n```{webr}\n#| exercise: e20\n#| solution: true\nifelse(y %in% c(7, 4, 0), \"in\", \"out\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e20' check='true'}\n```{webr}\n#| exercise: e20\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nHopefully, that made sense. If not, we can discuss more in class.\nYou've learned a lot!  That's enough for now!  Take a break!\n\n## Evaluation\n\n### Submit Your Assignment\n\n\n::: {.cell type='progress-submit'}\n```{adm}\n#| type: progress-submit\n```\n:::\n\n::: {#adm-progress-submit}\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n.progress_submit(\"06-Branch-Loop\", 20)\n```\n:::\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}