{
  "hash": "d8e699ce790c43bb21894e4b10bf9185",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducible Research\"\norder: 900\nexecute: \n  echo: true\nformat: \n    live-revealjs:\n        theme: dracula\n        css: ../styles.css\ninclude-in-header: \n  - text: <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\ninclude-after-body:\n  - text: <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n  - text: <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js\" integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\" crossorigin=\"anonymous\"></script>\n  - text: <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js\" integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\" crossorigin=\"anonymous\"></script>\n---\n\n# Objectives\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Learning Objectives\n\n#. Talk about our motivation, i.e, \"reproducible research\"\n#. Learn the basics of Markdown and Quarto\n#. Learn how to make a basic reproducible report\n#. Learn how to make the \"meat\" of a table that can be used for publication\n#. Learn how to make R inline and table output look better\n\n# Part 1. <br> Reproducible Research\n\n## What is \"reproducible\" research?\n\n- I put it in quotes because it would be better called *repeatable* or *replicable* research\n- However, the term that has been generally used *reproducible* so we are \"stuck with it\"\n- Why make the distinction?\n\n## The 4 R's\n\n![The 4 R's: repeat, replicate, reproduce, reuse](http://image.slidesharecdn.com/ismb2013keynotecleangoble-130726152010-phpapp01/95/ismbeccb-2013-keynote-goble-results-may-vary-what-is-reproducible-why-do-open-science-and-who-gets-the-credit-17-638.jpg)\\\n\n## Is repeatability and replicability worth having?\n\n- The authors distinctions are correct, but...\n- I disagree with the premise of the paper, i.e., \"replicability is not worth having\"\n- Instead, I suggest replicability, and especially repeatability of your own results *is* the foundation of reproducibility\n- Without being able to at least repeat exactly the results of your own analyses or replicate that of another group, why should you trust the results in order so that you can begin to try to reproduce them?\n\n## Why is reproducible research needed?\n\n- Data and their analysis are increasingly complex\n- Analysis is part of the methods!  \n- Generally, methods should be reported at the level that another group can *replicate* the results\n\n## Why is reproducible research needed?\n\n:::: {.columns}\n::: {.column width=\"66%\"}\n- Many experiments can not be reproduced\n    - Most large clinical trials\n    - Recent worries in the field of psychology\n- But replication is at least a step in the right direction\n:::\n::: {.column width=\"33%\"}\n![First page of Ioannidis' \"Why Most Published Research Findings Are False\"](../_static/ioannidis.png)\\\n:::\n::::\n\n:::aside\nIoannidis JPA (2005) Why Most Published Research Findings Are False. PLOS Medicine 2(8): e124. <https://doi.org/10.1371/journal.pmed.0020124>\n:::\n    \n## Because the IOM says so in [Evolution of Translational Omics](https://nap.nationalacademies.org/catalog/13297/evolution-of-translational-omics-lessons-learned-and-the-path-forward)\n\n:::: {.columns}\n::: {.column width=\"66%\"}\n- Data & metadata used should be made publicly available\n- The fully specified computational procedures and exact computer code used for the development \n  of the candidate omics-based test should be made *sustainably available*\n:::\n::: {.column width=\"33%\"}\n![IOM Report Cover](../_static/13297-0309224187-450.jpg)\\\n:::\n::::\n\n:::aside\nIOM = Institute of Medicine\n\nCover image: National Academies Press, Public Domain\n:::\n\n## Because the IOM says so in [Evolution of Translational Omics](https://nap.nationalacademies.org/catalog/13297/evolution-of-translational-omics-lessons-learned-and-the-path-forward)\n\n:::: {.columns}\n::: {.column width=\"66%\"}\n\"Ideally, the computer code that is released will encompass all the steps of computational analysis, *including all data\npreprocessing steps*$....$ \n\nAll aspects of the analysis need to transparently reported.''\n:::\n::: {.column width=\"33%\"}\n![IOM Report Cover](../_static/13297-0309224187-450.jpg)\\\n:::\n::::\n\n:::aside\nIOM = Institute of Medicine\n\nCover image: National Academies Press, Public Domain\n:::\n\n       \n## Sounds good, but how?\n\n:::: {.columns}\n\n::: {.column width=\"66%\"}\n+ One technique is \"literate programming\"\n\n    + Concept introduced by Donald Knuth (he's kinda a big deal)\n\n    + Write your reports/articles as a stream of code and text\n\n    + Needs the human/documentation language + a machine/programming language\n:::\n\n::: {.column width=\"33%\"}\n![Donald Knuth](https://upload.wikimedia.org/wikipedia/commons/4/4f/KnuthAtOpenContentAlliance.jpg){.r-stretch}\\\n:::\n\n::::\n\n::: aside \nBy Flickr user Jacob Appelbaum, uploaded to en.wikipedia by users BeSherman, Duozmo (Flickr.com (via en.wikipedia)) [CC BY-SA 2.5 (http://creativecommons.org/licenses/by-sa/2.5)], via Wikimedia Commons</span>\n:::\n    \n    \n## Keep the program easy to read\n\n:::: {.columns}\n\n::: {.column width=\"66%\"}\n> Programs are meant to be read by humans, and only incidentally for computers to execute.\n\n--- Harold Abelson and Gerald Jay Sussman\n:::\n\n::: {.column width=\"33%\"}\n![SICP Book Cover](https://upload.wikimedia.org/wikipedia/commons/9/9d/SICP_cover.jpg)\\\n:::\n\n::::\n\n:::aside\nHarold Abelson and Gerald Jay Sussman with Julie Sussman — MIT Press, CC BY-SA 4.0 <https://creativecommons.org/licenses/by-sa/4.0>, via Wikimedia Commons\n:::\n\n## Literate programming in R\n\n- In R, probably the best literate programming environment is Markdown (the human language) + R (the computer language) knit   \n  together with the help of knitr with [Quarto](https://quarto.org).\n- These slides have been made with Quarto!\n\n![Quarto Logo](../_static/quarto.png){.r-stretch}\\\n\n## Literate programming in R\n\nEach time you build a Quarto document it starts from scratch and\nexecutes in order preventing you from making mistakes such as:\n\n- executing something you didn't intend to make permanent\n- changing an object in the middle while you are working in the console \n  that changes your results\n\n## A (tiny) challenge\n\nNeed to know a little about 3-ish computer languages, i.e.,\n\n- R,\n- markdown, and\n- YAML.\n\nIf you know some HTML/CSS or {{< latex >}}, you can get even fancier.\n\nGood news! You don't need to know much of each, and all are fairly simple for the basics. \nSo you will be able to build a great foundation today!\n\n# Part 2. <br> Markdown and Quarto\n\n## Markdown\n\n- Markdown is the human readable language in Quarto\n- A way to represent rich text (formatting, etc.) as plain text\n   - [Official Markdown Site](http://daringfireball.net/projects/markdown/)\n   - [Pandoc (Quarto) Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)\n   - [Pandoc (Quarto) Markdown Details](https://pandoc.org/MANUAL.html#pandocs-markdown)\n\n## Philosophy\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n> \"A Markdown-formatted document should be publishable as-is, as plain \n> text, without looking like it's been marked up with tags or formatting \n> instructions.\" \n\n--- John Gruber (inventor of Markdown)\n:::\n::: {.column width=\"50%\"}\n![John Gruber B/W Photo](../_static/addison-bw.jpg)\\\n:::\n::::\n\n:::aside\nGeorge Del Barrio CC BY-SA 3.0 http://john.gruber.usesthis.com/\n:::\n\n## Inline formatting\n\nYou can create emphasis (italics), strong emphasis (bold), super-/subscripts.\n\n```{md-demo}\n*Emphasized* and **strongly emphasized**.\n\nWater's molecular formula is H~2~O and Avogadro's \nconstant is 6.022 x 10^23^ mol^-1^.\n```\n\n## Math\n\nBeautifully typesetting math is relatively easy too \nif you know a little {{< latex >}}\n\n```{md-demo}\nThe series $a + ar + ar^2 + \\dots + ar^{n - 1}$ equals\n$$ \\sum_{k = 0}^{n - 1} ar^k = a \\frac{1 - r^n}{1 - r}$$\n```\n\n## Code\n\nAnd you can include blocks of code/algorithms by placing 4 spaces or one tab in\nfront of each line:\n\n```{md-demo}\n    # Step 1\n    printf(\"Hello world!\")\n    # Step 2\n    exit()\n```\n\n\n## Code\n\nBut most often you can put code in fenced blocks using triple backticks\n(```)\n\n::: {.md-code}\n````{.markdown}\n```\n# Step 1\nprintf(\"Hello world!\")\n# Step 2\nexit()\n```\n````\n:::\n\n::: {.md-render}\n```\n# Step 1\nprintf(\"Hello world!\")\n# Step 2\nexit()\n```\n:::\n\n## Headers\n\nTwo styles - style 1\n\n::: {.md-code}\n````{.markdown}\n```\nLevel1\n======\n\nHello\n\nLevel2\n------\n\nHi!\n```\n````\n:::\n\n::: {.md-render}\n`<h1>Level 1</h1>`{=html}\n\nHello!\n\n`<h2>Level 2</h2>`{=html}\n\nHi!\n:::\n\n## Headers\n\nTwo styles - style 2\n\n::: {.md-code}\n````{.markdown}\n```\n# Level1\nA\n## Level2\n### Level3\nB\n#### Level4\n```\n````\n:::\n\n::: {.md-render}\n`<h1>Level 1</h1>`{=html}\nA\n`<h2>Level 2</h2>`{=html}\n`<h3>Level 3</h3>`{=html}\nB\n`<h4>Level 4</h4>`{=html}\n:::\n\n## Paragraphs\n\nSeparate by one or more blank lines.  Newlines are otherwise treated as spaces allowing you\nto wrap your text as you like.\n\n```{md-demo}\nParagraph 1 text. Ipsum dolor sit amet, consectetur adipiscing elit.\n\nParagraph \n2\ntext. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n```\n\n## Block quotes and smart punctuation\n\n```{md-demo}\n> \"Snakes. Why did it\n> have to be snakes?\" \n\n---Indiana Jones\n\nAn en-dash is used for ranges of numbers: 2--5 pages.\n```\n\n## Line breaks {#sec-line-breaks}\n\nPreserves line breaks like this.\n\n```{md-demo}\n| The limerick packs laughs anatomical\n| In space that is quite economical.\n|     But the good ones I've seen\n|     So seldom are clean\n| And the clean ones so seldom are comical\n```\n\n## Unordered Lists \n\nFour space or one tab rule to nest.\n\n```{md-demo}\n* first item\n* second item\n    * nested item\n    + doesn't matter what you start with\n- third item\n```\n\n## Ordered list\n\nThe numbers don't matter (except the first tells it where to start).  Nest by\nindenting four spaces.\n\n```{md-demo}\n25.  Twenty-fifth\n8.  Twenty-sixth\n    1.  First nested\n    85.  Second nested\n3.  Twenty-seventh\n```\n\n## Ordered list {.scrollable}\n\nBut try to be friendly to those reading it in text form or \nuse this alternate form, i.e., `#.`{=markdown}\n\n```{md-demo}\n#. First item\n#. Second item\n    #. Nested first\n    #. Nested second\n```\n\n## Definition list\n```{md-demo}\nAttribution\n ~  *n.*, The act of attributing, especially the act of establishing a particular person as the creator of a work of art.\n ~  *n.*, Something, such as a quality or characteristic, that is related to a particular possessor; an attribute.\n\nDefinition\n ~ *n.*, A statement conveying fundamental character.\n ~ *n.*, A statement of the meaning of a word, phrase, or term, as in a dictionary entry.\n ~ *n.*, The act or process of stating a precise meaning or significance; formulation of a meaning.\n```\n\n## Horizontal rules\n\nA line containing a row of three or more *, -, or _ characters (optionally separated by spaces) produces a horizontal rule:\n\n```{md-demo}\n*  *  *  *\n\n---------------\n```\n\n## External links\n\nTo external sites are generally autoconverted but can also be done more\nexplicitly and with custom text.\n\n```{md-demo}\nhttp://www.google.com\n\n<http://www.google.com>\n\n[Google](http://www.google.com)\n```\n\n## Cross-references\n\nVarious items can be [cross-referenced](https://quarto.org/docs/authoring/cross-references.html)\nincluding headers, figures, tables, equations, and code blocks.\n\n```{md-demo}\n### The main section {#sec-main}\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n\n### A later section \n\nVarius congue suscipit placerat enim ante id sollicitudin. Enim congue vulputate nisi aptent rhoncus nec.\n```\n\n## Cross-references\n\nVarious items can be [cross-referenced](https://quarto.org/docs/authoring/cross-references.html)\nincluding headers, figures, tables, equations, and code blocks.\n\n\n```{md-demo}\n### An even later section\n\nFelis praesent sollicitudin vulputate tellus finibus praesent varius quis diam erat litora phasellus. \n\n### The final section?\n\nYes, good stuff is here too, but maybe you want to go back to\n[the main section](#sec-main) and review.\n```\n\n## Images \n\n```{md-demo}\n![The R Logo](https://www.r-project.org/logo/Rlogo.svg)\n```\n\n## Images \n\nSize it with a little help from CSS (no space around equals sign!)\n\n```{md-demo}\n![The R Logo](https://www.r-project.org/logo/Rlogo.svg){width=25%}\n```\n\n## Footnotes {.scrollable}\n\n```{md-demo}\nHere is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they belong to the previous footnote.\n\n    The whole paragraph can be indented, or just the first line.\n\nThis paragraph won't be part of the note, because it isn't indented.\n```\n\n## Inline notes\n\n```{md-demo}\nHere is an inline note.^[Inlines notes are easier to write, since\nyou don't have to pick an identifier and move down to type the\nnote.]\n```\n\n## Tables\n\nSeveral [formats available](https://quarto.org/docs/authoring/tables.html). \nPainful to type yourself (so don't! - see the knitr part later!)\n\n```{md-demo}\n+---------------+---------------+--------------------+\n| Fruit         | Price         | Advantages         |\n+===============+===============+====================+\n| Bananas       | $1.34         | - bright color     |\n+---------------+---------------+--------------------+\n| Oranges       | $2.10         | - cures scurvy     |\n+---------------+---------------+--------------------+\n```\n\n## Tables\n\nSeveral [formats available](https://quarto.org/docs/authoring/tables.html). \nPainful to type yourself (so don't! - see the knitr part later!)\n\n```{md-demo}\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n```\n\n## And a lot, lot more!\n\n+ Bibliographic citations using {{< bibtex >}}, EndNote, etc.\n+ Special markup for slides\n    + Incremental lists\n    + Pauses\n    + Speaker notes\n+ Raw HTML, {{< tex >}}, {{< latex >}} can be included depending on the target document\n+ Additional features and subtlety to many things we covered\n\n# Part 3. <br> A basic reproducible report in Quarto\n\n## Quarto document (.qmd)\n\nA Quarto document has \n\n- A YAML header,\n- markdown text for the narrative with code blocks embedded containing\n- R code to display and execute.\n\n## The YAML header\n\nContains metadata that becomes titles, headings, etc. and controls output\nformatting. (Hover over the circled numbers for more detail.)\n\n:::: { .qmd-demo file=\"yaml01\" }\n::: { .after-col1 }\n1. This nested structure in `format:` specifies that we want to produce an \n   HTML document with embedded resources which means that you can send the file \n   to someone else, e.g., by e-mail, and it will still work.\n2. `engine: knitr` specifies the use of the knitr engine for code chunks.\n:::\n::::\n\n## The YAML header\n\nSome formatting flexibility is available, but generally you have to live\nwith what it produces unless you want to get into HTML/CSS customization \nwriting special formatters in yet another programming language.\n\n:::: { .qmd-demo file=\"yaml02\" }\n::: { .after-col1 }\n1. Do these [line breaks look familiar](#sec-line-breaks)?\n2. You can include links.\n:::\n::::\n\n## The YAML header\n\n:::: { .qmd-demo file=\"yaml03\"}\n::: { .after-col1 }\n1. Add a [theme](https://bootswatch.com/), `united` here.\n2. Add a [table of contents](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents) that by\n   default floats alongside the document.\n:::\n::::\n\n## R code blocks\n\nNow, start to combine text and R code. (No YAML header this time just to\nhelp us focus on the R code blocks.)\n\n:::: { .qmd-demo file=\"rblock01\"}\n::: { .after-col1 }\n1. The R code block starts with ````{r}`.  The `r` indicates the language.\n2. Write R code as you normally would here.\n:::\n::::\n\n## Chunk attributes: `echo`\n\nChunk attributes control many features of the display. \nFor example, you can control whether the code is shown or not.\n\n:::: { .qmd-demo file=\"rblock02\"}\n::: { .after-col1 }\n1. `echo: false` makes the code invisible in the output.\n:::\n::::\n\n## Chunk attributes: `comment`\n\nOr what is used to comment the results or if it is commented at all.\n\n:::: { .qmd-demo file=\"rblock03\"}\n::: { .after-col1 }\n1. `comment = \"#\"` adds these characters before each line of output.\n:::\n::::\n\n## Chunk attributes: `eval`\n\nShow the code, but do not run it.\n\n:::: { .qmd-demo file=\"rblock04\"}\n::: { .after-col1 }\n1. `eval: false` prevents the code from being run.\n:::\n::::\n\n## Chunk attributes: `include`\n\nYou can also do neither, but still run the code which is very useful for\nsetup/configuration.\n\n:::: { .qmd-demo file=\"rblock05\"}\n::: { .after-col1 }\n1. `include: false` runs the code, but shows neither the code nor its output.\n:::\n::::\n\n## Chunk attributes: `name`\n\nBlocks can be named and this is most useful for locating where errors occur.\n\n:::: { .qmd-demo file=\"rblock06\"}\n::::\n\n## R code blocks\n\nPlotting just works... most of the time, but there are chunk attributes\nfor when it doesn't (e.g., figure height/width, format, etc.).  Note that if we\nhad already used `mtcars` as we did in the blocks above, \nwe would not have to call `data(mtcars)`.  The\ndocument works as a single code file, which is one way that it creates\nreproducible results.\n\n:::: { .qmd-demo file=\"rblock07\"}\n::::\n\n## Global options\n\nYou can set global options in the YAML header for the most common way\nthat you want each R code block run.  You can override those global options\njust by changing any at the relevant block as we were doing before.\n\n```{.markdown}\n---\nexecute:\n  echo: false\n  warning: false\n  message: false\n  fig-width: 12\n  fig-height: 8\nformat:\n  html:\n    embed-resources: true\nengine: knitr\n---\n```\n\nRead more about chunk options at \n<https://quarto.org/docs/output-formats/html-code.html>.\n\n## Inline R code\n\nMany times you do not want to have raw R output in your files especially if they\nare for public consumption.  One way to deal with that is inline R code.\n\n:::: { .qmd-demo file=\"inline\"}\n::::\n\nHowever, this output is not really ideal either and in a bit we will see how to\nmake it better. Before we do that, let's see how to create tables too.\n\n# Part 4. <br> Automatically building tables for publication\n\n## Tables\n\nThere are several ways to make tables.  One of the easiest is `knitr::kable` because\nyou already have `knitr` available.  \n\n:::: { .qmd-demo file=\"tab\"}\n::::\n\n## Tables\n\nIf `knitr::kable` does not meet your needs, you can explore other packages,\nsuch as [`gt`](https://gt.rstudio.com/), [`dt`](https://rstudio.github.io/DT/),\nor [`htmlTable`](https://github.com/gforge/htmlTable).  \n\nMost often use their output options to produce HTML tables in `output: asis` \nblocks just like we did with `knitr::kable`.\n\n## The final product\n\n- Unlike most webpages, everything is included in your final file: images, \n  special formatting, etc. if you use the `embed-resources: true` option.\n- You can e-mail them to others and they should work with nothing else! \n  (old Internet Explorer sometimes excluded...)\n\n# Part 5. <br> Making output look better with `sprintf`\n\n## What is sprintf?\n\n- `sprintf` is an R function for text formatting  \n- Name and format specifications used are based on the C programming language conventions \n- However, these formats are widely used in many programming languages, e.g., Python, etc.\n- `sprintf` is useful for making your R output more user friendly for inline text and tables.\n\n## Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnums <- 1:10\nsrts <- sqrt(nums)\nsprintf(\"%.2f\", srts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1.00\" \"1.41\" \"1.73\" \"2.00\" \"2.24\" \"2.45\" \"2.65\" \"2.83\" \"3.00\" \"3.16\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%.1f\", srts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1.0\" \"1.4\" \"1.7\" \"2.0\" \"2.2\" \"2.4\" \"2.6\" \"2.8\" \"3.0\" \"3.2\"\n```\n\n\n:::\n:::\n\n\n## The structure of a format\n\nStarts with a percent sign `%` and ends with a letter (case sensitive)\n\n- The most useful ending letters are\n    - `d`: integer,\n    - `f`: fixed point decimal notation,\n    - `e` or `E`: scientific notation,\n        - [-]m.ddd**e**[+-]xx or          \n        - [-]m.ddd**E**[+-]xx, and \n    - `s`: character string\n- Note that you can still use `s` with integers (R will convert)\n\n## Example 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%d: (%.2f)\", nums, srts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1: (1.00)\"  \"2: (1.41)\"  \"3: (1.73)\"  \"4: (2.00)\"  \"5: (2.24)\" \n [6] \"6: (2.45)\"  \"7: (2.65)\"  \"8: (2.83)\"  \"9: (3.00)\"  \"10: (3.16)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%2s: (%.2f)\", nums, srts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \" 1: (1.00)\" \" 2: (1.41)\" \" 3: (1.73)\" \" 4: (2.00)\" \" 5: (2.24)\"\n [6] \" 6: (2.45)\" \" 7: (2.65)\" \" 8: (2.83)\" \" 9: (3.00)\" \"10: (3.16)\"\n```\n\n\n:::\n:::\n\n\n## Inside the `%` and letter\n\nNo space between the `%` and letter means the default\n - strings as is\n - 6 decimal places for numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%s\", \"supercalifragilisticexpialidocious\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"supercalifragilisticexpialidocious\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%f\", 2.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.300000\"\n```\n\n\n:::\n:::\n\n\n## Inside the `%` and letter\n\nPlace a number for the field width in characters, only pads with spaces;\nif things exceed width, they will will not be truncated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%5s\", c(\"adamant\", \"list\", \"do\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"adamant\" \" list\"   \"   do\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%10f\", c(2.3, 1231.459898001)) # default 6 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"  2.300000\"  \"1231.459898\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%2f\", c(2.3, 1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.300000\"    \"1231.459898\"\n```\n\n\n:::\n:::\n\n\n\n## Inside the `%` and letter\n\nIf `f` then use `.<num>` to specify the number of decimal places.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%10.2f\", c(2.3, 1231.459898001)) # default 6 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"      2.30\" \"   1231.46\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%2.2f\", c(2.3, 1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.30\"    \"1231.46\"\n```\n\n\n:::\n:::\n\n\n## Inside the `%` and letter\n\nUse `-` to left justify within the width. Any order is ok.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%-5s\", c(\"adamant\", \"list\", \"do\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"adamant\" \"list \"   \"do   \"  \n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%10.2-f\", c(2.3, 1231.459898001)) # default 6 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.30      \" \"1231.46   \"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%-2.2f\", c(2.3, 1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.30\"    \"1231.46\"\n```\n\n\n:::\n:::\n\n\n## Inside the `%` and letter\n\nUse `+` to always add signs to numbers\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%+10.2-f\", c(-2.3, 1231.459898001)) # default 6 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-2.30     \" \"+1231.46  \"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%+.2f\", c(2.3, -1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"+2.30\"    \"-1231.46\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%+.2e\", c(2.3, -1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"+2.30e+00\" \"-1.23e+03\"\n```\n\n\n:::\n:::\n\n\n## Inside the `%` and letter\n\nUse `0` (zero) to zero pad. Note however this may not work on all platforms, but\nhas on all that I have tried (Windows, Mac, Linux).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%010.2f\", c(-2.3, 1231.459898001)) # default 6 decimal places\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"-000002.30\" \"0001231.46\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%05.2f\", c(2.3, -1231.459898001))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"02.30\"    \"-1231.46\"\n```\n\n\n:::\n\n```{.r .cell-code}\nsprintf(\"%08d\", 1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"00000001\" \"00000002\" \"00000003\" \"00000004\" \"00000005\"\n```\n\n\n:::\n:::\n\n\n## How to get a percent sign and getting fancier\n\nUse `%%` to get a literal percent sign\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsprintf(\"%d/%d (%.2f%%)\", 2, 3, 2/3 * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2/3 (66.67%)\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- 1:10\ny <- x + 2\nsprintf(\"%d/%d (%.0f%%)\", x, y, x/y * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1/3 (33%)\"   \"2/4 (50%)\"   \"3/5 (60%)\"   \"4/6 (67%)\"   \"5/7 (71%)\"  \n [6] \"6/8 (75%)\"   \"7/9 (78%)\"   \"8/10 (80%)\"  \"9/11 (82%)\"  \"10/12 (83%)\"\n```\n\n\n:::\n:::\n\n\n# *r*printf\n\n![But wait there's more!](../_static/butwait.jpg)\\\n\nIf you buy *s*printf in the next 10 minutes,\nI'll throw in *r*printf for free!\n\n## *r*printf - works just like *s*printf BUT...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"rprintf\")\nlibrary(rprintf)\nrprintf(\"%d/%d (%.0f%%)\", x, y, x/y * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1/3 (33%)\"   \"2/4 (50%)\"   \"3/5 (60%)\"   \"4/6 (67%)\"   \"5/7 (71%)\"  \n [6] \"6/8 (75%)\"   \"7/9 (78%)\"   \"8/10 (80%)\"  \"9/11 (82%)\"  \"10/12 (83%)\"\n```\n\n\n:::\n:::\n\n\n## *r*printf - gives you named formats\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrprintf('$a, $b:.1f, $c:+.2f, $b, $a:.0f',a=1.56,b=2.34,c=3.78)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1.56, 2.3, +3.78, 2.34, 2\"\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(esoph)\nhead(esoph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  agegp     alcgp    tobgp ncases ncontrols\n1 25-34 0-39g/day 0-9g/day      0        40\n2 25-34 0-39g/day    10-19      0        10\n3 25-34 0-39g/day    20-29      0         6\n4 25-34 0-39g/day      30+      0         5\n5 25-34     40-79 0-9g/day      0        27\n6 25-34     40-79    10-19      0         7\n```\n\n\n:::\n\n```{.r .cell-code}\nrprintf(\"$agegp, $ncontrols:02d\", head(esoph))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"25-34, 40\" \"25-34, 10\" \"25-34, 06\" \"25-34, 05\" \"25-34, 27\" \"25-34, 07\"\n```\n\n\n:::\n:::\n\n\n## *r*printf - gives you a numbering mechanism\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrprintf(\"{2:.1f}, {1:.2f}\", 1.56, 2.34)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2.3, 1.56\"\n```\n\n\n:::\n:::\n\n\n## *r*printf - mix and match\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrprintf(c(a='%s:%d',b='$name:$age',c='{1}:{2}'),name='Ken',age=24)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       a        b        c \n\"Ken:24\" \"Ken:24\" \"Ken:24\" \n```\n\n\n:::\n:::\n\n\n## Putting it all together\n\nCheck out the [Basic Table Example](09a-Basic-Table-Example.qmd)\n\n## Advanced example\n\n![Bam!!!](../_static/emiral.jpg)\\\n\n\nCheck out the [Advanced Table Example](09b-Advanced-Table-Example.qmd)\n\n## For more information\n\n- [Official Markdown Site](http://daringfireball.net/projects/markdown/)\n- [Pandoc (Quarto) Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)\n- [Pandoc (Quarto) Markdown Details](https://pandoc.org/MANUAL.html#pandocs-markdown)\n- [Code block options](https://quarto.org/docs/output-formats/html-code.html)\n- [Inline code](https://quarto.org/docs/computations/inline-code.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}