{
  "hash": "267a771c91285e6c8dd6d5ad82d7a950",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Complex Table Example (Tidyverse Version)\"\n---\n\nlibrary(adm)\nlibrary(tidyverse)\n\n# need n1 and n0 for the header of the table\n# these will just be kept in a vector\nn_strs <- paste0(\"n=\", summary(lbw$low))\n\n# make some derived variables\nlbw %>%\n  mutate(\n    age.lte20 = factor(ifelse(lbw$age <= 20, 1, 0)),\n    lwt.lt110 = factor(ifelse(lbw$lwt < 110, 1, 0)),\n    black = factor(ifelse(lbw$race == 'black', 1, 0)),\n    white = factor(ifelse(lbw$race == 'white', 1, 0)),\n    otherrace = factor(ifelse(lbw$race == 'other', 1, 0))\n  ) %>%\n  mutate(across(c(ptl, ftv), \n                ~ factor(ifelse(. != '0', 1, 0)),\n                .names = \"{col}.ge1\")) ->\n  lbw\n\n# create the header\n# note that &___; are called HTML entities and allow you produce special characters\nHEADERATTR <- list(NULL, list(colspan = 2), NULL, list(colspan = 2), NULL, NULL)\nc(\"\", \"Low birth weight\", \"&nbsp;&nbsp;&nbsp;\", \n  \"Non-low birth weight\", \"\", \"\") %>%\n  html(\"th\", HEADERATTR) %>%\n  html(\"tr\") ->\n  header\n\nlist(NULL, \n     list(style = \"border-bottom: black solid\"),\n     NULL, \n     list(style = \"border-bottom: black solid\"),\n     NULL, \n     NULL) %>%\n  map2(HEADERATTR, ., c) ->\n  HEADERATTR2\n\nc(\"\", n_strs[1], \"\", n_strs[2], \"\", \"\") %>%\n  html(\"th\", HEADERATTR2) %>%\n  html(\"tr\") %>%\n  c(header, .) ->\n  header\n\nc(\"Variable\", \"n\", \"%\", \"\", \"n\", \"%\", \n  \"&chi;<sup>2</sup>\", \"p &dagger;\") %>%\n  html(\"th\", list(list(style = \"border-bottom: black solid\"))) %>%\n  html(\"tr\") %>%\n  c(header, .) %>%\n  paste(collapse = \"\") ->\n  header\n\n# now lets work on the body\n# watch it - rownames (without a period)\n# is a function you probably don't want to mask so use\n# row.names instead\nrow.names <- c(\n  \"Age of mother, &le;20 years\", \n  \"Race\", \n  \"&nbsp;-&nbsp; Black\", \n  \"&nbsp;-&nbsp; White\", \n  \"&nbsp;-&nbsp; Other\", \n  \"Weight at last menstrual period &lt;110 lbs\", \n  \"History of premature labor\", \n  \"Smoked during pregnancy\", \n  \"History of hypertension\", \n  \"History of uterine irritability\", \n  \"At least one physician visit during first trimester\")\n\n# build a function to output each row\nrow.builder <- function(varname) {\n  if(varname == \"NULL\") {\n    out <- rep(\"\", 7)\n  } else {\n    tab <- table(lbw[, varname], lbw$low)\n    props <- sprintf(\"%.1f\", prop.table(tab, 2)[2, ]*100)\n    stats <- summary(tab)\n    # automatically determine if Fisher test is appropriate\n    if(stats$approx.ok) {\n      chisq <- sprintf(\"%.2f\", stats$statistic)\n      pval <- stats$p.value\n      twotail <- \"\"\n    } else {\n      chisq <- \"&Dagger;\"\n      pval <- fisher.test(tab)$p.value\n      twotail <- \"&sect;\"\n    }\n    star <- ifelse(pval<0.05, \"*\", \"\")\n    pval <- ifelse(pval<0.001, \"&lt;0.001\", \n                   ifelse(pval<0.01, sprintf(\"%.3f\", stats$p.value), \n                          sprintf(\"%.2f\", stats$p.value)))\n    pval <- paste(pval, star, twotail, sep = \"\")\n    # need names to get bind_rows to work\n    out <- c(tab[2, 2], props[2], \"\", tab[2, 1], props[1], chisq, pval)\n  }\n  names(out) <- letters[1:length(out)]\n  out\n}\n\n# now that's more like magic\nvars <- c(\"age.lte20\", \"NULL\", \"black\", \"white\", \"otherrace\", \n          \"lwt.lt110\", \"ptl.ge1\", \"smoke\", \"ht\", \"ui\", \"ftv.ge1\")\nbody <- exec(bind_rows, !!!map(vars, row.builder))\n\n# all but last row\nrow.names %>%\n  map_chr(html,\n          \"td\", \n          list(list(style=\"font: bold\"))) %>%\n  head(-1) ->\n  row.names1\n\nbody %>% \n  rowwise %>% \n  pmap(~ html(c(...), \"td\", list(list(style = \"text-align: center\")))) %>%\n  head(-1) ->\n  body1\n\n# last row special formatting\nrow.names2 <- html(row.names[length(row.names)], \"td\", \n                   list(list(style = \"font: bold; border-bottom: black solid\")))\n\nbody2 <- html(body[nrow(body), ], \"td\", \n              list(list(style = \"text-align: center; border-bottom: black solid\")))\n\n# recombine\nrow.names <- c(row.names1, row.names2)\nbody <- c(body1, body2)\n\n# join row.names to body\nbody <- html(paste(row.names, body), \"tr\")\n\n# join header to body\nall <- paste(header, body, sep = \"\")\n\n# title (the \\ at the end of the line let's me break this long string without\n# an error)\ncat(html(\"<b>Table 1.</b> Frequency of exposures in cases of low birth \\\n         weight (&lt;2500 g) vs. non-low birth weight.\", \"p\"), \n    file = \"table1.html\")\n\n# table output\ntable <- html(all, \"table\", list(list(style = \"border-collapse:collapse\")))\ncat(table, file = \"table1.html\", append = TRUE)\n\n# footnotes\nfootnotes <- c(\n  \"&dagger; &alpha;=0.05. Significant p-values are marked with an asterisk (*).<br/>\", \n  \"&Dagger; Fisher's Exact Test<br/>\", \n  \"&sect; Two-tailed p-value<br/>\")\ncat(html(footnotes, \"small\"), file = \"table1.html\", append = TRUE)\n\n# file was written above but we'll read it back in and display here\ncat(readLines(\"table1.html\"))\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}