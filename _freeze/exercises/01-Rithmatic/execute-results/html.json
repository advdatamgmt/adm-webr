{
  "hash": "547208d38b96fcf5fbcaaf8413a3aba8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rithmatic\"\norder: 100\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Exposition\n\n### Introduction\n\nOne of the best ways to start learning R is to use it as a calculator. Below\nwe'll start to do some simple arithmetic in R.  We are using a special kind of\nR called `webr`{.txt} that runs directly in your web browser.\n\nThis means you can use R without having to install anything on your computer!\n\nWhen you see text that is formated like `2 + 2`{.r}, it is code that should be\ntyped exactly as it is written for R to read or represents a verbatim response\nfrom R.\n\n### Addition\n\nTry typing `2 + 2`{.r} in the box labelled \"Exercise\" just below this paragraph\nand then click  on the <span class=\"btn-group btn-group-exercise-editor btn-group-sm\"><a class=\"d-flex align-items-center gap-1 btn btn-exercise-editor btn-primary exercise-editor-btn-run-code text-nowrap\" role=\"button\" aria-label=\"Non-functioning Run Code Button\" style=\"--bs-btn-padding-x: .5rem;\n  --bs-btn-padding-y: .15rem;\n  --bs-btn-font-size: .75rem;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16  \" fill=\"currentColor\" class=\"bi bi-play\" viewBox=\"0 0 16 16\">\n    <path d=\"M10.804 8 5 4.633v6.734zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696z\"></path>\n  </svg><span class=\"btn-label-exercise-editor\">Run Code</span></a></span> button in the upper right to evaluate\nthe code. When you run the code, you should see the result `[1] 4`{.txt} printed\nbelow the editor. We'll learn why there is a `[1]`{.txt} in front of the answer\n`4`{.txt} later.\n\n\n::: {.cell caption='Exercise 1' exercise='e1'}\n```{webr}\n#| caption: Exercise 1\n#| exercise: e1\n```\n:::\n\n\n::: { .solution exercise=\"e1\" }\n\n::: {.cell exercise='e1' solution='true'}\n```{webr}\n#| exercise: e1\n#| solution: true\n2 + 2\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e1' check='true'}\n```{webr}\n#| exercise: e1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n### Subtraction\n\nNow try subtraction below by asking R what `20 - 4.2`{.r} equals.  However,\nthis time, instead of clicking <span class=\"btn-group btn-group-exercise-editor btn-group-sm\"><a class=\"d-flex align-items-center gap-1 btn btn-exercise-editor btn-primary exercise-editor-btn-run-code text-nowrap\" role=\"button\" aria-label=\"Non-functioning Run Code Button\" style=\"--bs-btn-padding-x: .5rem;\n  --bs-btn-padding-y: .15rem;\n  --bs-btn-font-size: .75rem;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16  \" fill=\"currentColor\" class=\"bi bi-play\" viewBox=\"0 0 16 16\">\n    <path d=\"M10.804 8 5 4.633v6.734zm.792-.696a.802.802 0 0 1 0 1.392l-6.363 3.692C4.713 12.69 4 12.345 4 11.692V4.308c0-.653.713-.998 1.233-.696z\"></path>\n  </svg><span class=\"btn-label-exercise-editor\">Run Code</span></a></span>,\nuse the keyboard shortcut `<span class=\"kbdcombo\"><kbd>Ctrl</kbd> +\n<kbd>Enter</kbd></span>`{=html} on Windows/Linux or `<span class=\"kbdcombo\">\n<kbd>⌘ command</kbd> + <kbd>Enter</kbd></span>`{=html} on Mac (note the + sign means to\npress both keys at the same time).\n\nUsing the keyboard shortcut is a lot faster than clicking the button, so you\nshould get in the habit of using it for all the exercises below.\n\n\n::: {.cell caption='Exercise 2' exercise='e2'}\n```{webr}\n#| caption: Exercise 2\n#| exercise: e2\n```\n:::\n\n\n::: { .solution exercise=\"e2\" }\n\n::: {.cell exercise='e2' solution='true'}\n```{webr}\n#| exercise: e2\n#| solution: true\n20 - 4.2\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e2' check='true'}\n```{webr}\n#| exercise: e2\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nWhy stop with just one subtraction? Now try `100 - 20 - 5`{.r}.\n\n\n::: {.cell caption='Exercise 3' exercise='e3'}\n```{webr}\n#| caption: Exercise 3\n#| exercise: e3\n```\n:::\n\n\n::: { .solution exercise=\"e3\" }\n\n::: {.cell exercise='e3' solution='true'}\n```{webr}\n#| exercise: e3\n#| solution: true\n100 - 20 - 5\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e3' check='true'}\n```{webr}\n#| exercise: e3\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n### Multiplication and Division\n\nOK, now multiplication:\n`5 * 4 * 3 * 2 * 1`{.r}.\n\n\n::: {.cell caption='Exercise 4' exercise='e4'}\n```{webr}\n#| caption: Exercise 4\n#| exercise: e4\n```\n:::\n\n\n::: { .solution exercise=\"e4\" }\n\n::: {.cell exercise='e4' solution='true'}\n```{webr}\n#| exercise: e4\n#| solution: true\n5 * 4 * 3 * 2 * 1\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e4' check='true'}\n```{webr}\n#| exercise: e4\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nHow about division with `25 / 5`{.r}?\n\n\n::: {.cell caption='Exercise 5' exercise='e5'}\n```{webr}\n#| caption: Exercise 5\n#| exercise: e5\n```\n:::\n\n\n::: { .solution exercise=\"e5\" }\n\n::: {.cell exercise='e5' solution='true'}\n```{webr}\n#| exercise: e5\n#| solution: true\n25 / 5\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e5' check='true'}\n```{webr}\n#| exercise: e5\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n## Experimentation\n\n### Division by Zero\n\nNow is a time for you to extend your knowledge by\nexploring and experimenting some yourself.  So before you\nanswer the next question you need to play around some.\n\nBelow is a code editor where you can type in any R code you want.\n\nFirst, figure out what R thinks a number divided by zero is in the box\nlabeled \"Experiment\" just below.\n\n\n::: {.cell caption='Experiment'}\n```{webr}\n#| caption: Experiment\n```\n:::\n\n\nSo what did you learn?  Just type your answer in the code editor below and\nrun it to submit and check your answer.\n\n\n::: {.cell caption='Exercise 6' exercise='e6'}\n```{webr}\n#| caption: Exercise 6\n#| exercise: e6\n#| output: false\n```\n:::\n\n\n::: { .hint exercise=\"e6\" }\nDo **NOT** put the `[1]`{.txt} as part of your answer, and note that R is case\nsensitive.  Upper vs. lowercase letters matter.\n\nIf you still aren't sure, then try again and type `5 / 0`{.r} in the Experiment\nbox above or something similar to see the result.\n:::\n\n::: { .solution exercise=\"e6\" }\n\n::: {.cell exercise='e6' solution='true'}\n```{webr}\n#| exercise: e6\n#| solution: true\n```\n:::\n\n\nThree answers are each correct depending on the\nsituation.  If you divide a positive number by zero, R returns `Inf`{.txt}\n(infinity).  If you divide a negative number by zero, R returns `-Inf`{.txt}\n(negative infinity). If you divide zero by zero, R returns `NaN`{.txt}\n(not a number)!\n\n\n::: {.cell edit='false' autorun='true'}\n```{webr}\n#| edit: false\n#| autorun: true\n2 / 0\n```\n:::\n\n\n\n\n::: {.cell edit='false' autorun='true'}\n```{webr}\n#| edit: false\n#| autorun: true\n-5 / 0\n```\n:::\n\n\n\n::: {.cell edit='false' autorun='true'}\n```{webr}\n#| edit: false\n#| autorun: true\n0 / 0\n```\n:::\n\n\nAs you learn to program, you'll find it is helpful to try to think of\npossible edge cases that might give you different results than you expect.\nIt is also be good to be aware of the possiblilities, because if you see\n`NaN`{.txt} come from your code, you'll know you probably divided by zero\nsomewhere without expecting it.\n:::\n\n\n::: {.cell exercise='e6' check='true'}\n```{webr}\n#| exercise: e6\n#| check: true\ngradethis::grade_this({\n  if (.user_code == \"NaN\" || .user_code == \"Inf\" || .user_code == \"-Inf\") {\n    pass(\"Correct! But did you realize there are three possible answers?\")\n  } else {\n    fail(\"Hmm, I think you should try division by zero again in the\n     Experiment box above.  Remember, type only the answer here.\")\n  }\n})\n```\n:::\n\n\n\n::: {.cell exercise='e6' type='open-solution-on-pass'}\n```{adm}\n#| exercise: e6\n#| type: open-solution-on-pass\n```\n:::\n\n\n### A mystery operator\n\nNow, I want you to try to figure something else out.  What does the\n`%%`{.r} operator do?  You code with it just like `+`{.r}, `-`{.r}, `*`{.r},\nor `/`{.r} with two numbers.\n\nFor now limit your experiments to the left number being larger than the\nright and use only whole positive numbers, i.e., positive integers, on both\nsides.\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n12 %% 5\n```\n:::\n\n\nExperiment for a bit until you are pretty sure you have it right, and then,\nanswer the questions below.\n\n\n::: {.cell caption='Experiment'}\n```{webr}\n#| caption: Experiment\n```\n:::\n\n\nReady to test your knowledge?  Answer the following questions.\n\nWhat is `13 %% 3`{.r}? (Of course, you could just type it in the \"Experiment\"\nbox above to find out, but try to figure it out without doing that!)\n\n\n::: {.cell caption='Exercise 7' exercise='e7'}\n```{webr}\n#| caption: Exercise 7\n#| exercise: e7\n#| output: false\n```\n:::\n\n\n::: { .hint exercise=\"e7\" }\nAre you sure you tried enough examples in the Experiment box above?\nTry `12 %% 5`{.r}, `11 %% 5`{.r}, `10 %% 5`{.r}, and `9 %% 5`{.r}\nthen try `12 %% 6`{.r}, `12 %% 5`{.r}, `12 %% 4`{.r}, `12 %% 3`{.r},\n`12 %% 2` to see if you can find a pattern. It's related to division.\n:::\n\n::: { .solution exercise=\"e7\" }\nThe answer is `1`{.txt} because `3`{.r} goes into `13`{.r} four\ntimes with a remainder of\n`1`{.r}.\n\n\n::: {.cell exercise='e7' solution='true'}\n```{webr}\n#| exercise: e7\n#| solution: true\n1\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e7' check='true'}\n```{webr}\n#| exercise: e7\n#| check: true\ngradethis::grade_this({\n  if (.user_code == \"1\") {\n    pass()\n  } else {\n    fail('Remember, you are only supposed to put the answer in the box. Do\n    **NOT** put the `[1]` as part of your answer, and only put the answer\n    in the box.  No extra text. If you\n     are only putting a number in the box, then I suggest trying more in the\n     \"Experiment\" box above to see if you can figure out the mystery operator\n     or clicking \"Show Hint\" to see a hint.')\n  }\n})\n```\n:::\n\n\nOK, what is `8 %% 8`{.r}?\n\n\n::: {.cell caption='Exercise 8' exercise='e8'}\n```{webr}\n#| caption: Exercise 8\n#| exercise: e8\n#| output: false\n```\n:::\n\n\n::: { .solution exercise=\"e8\" }\n\n::: {.cell exercise='e8' solution='true'}\n```{webr}\n#| exercise: e8\n#| solution: true\n0\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e8' check='true'}\n```{webr}\n#| exercise: e8\n#| check: true\ngradethis::grade_this({\n  if (.user_code == \"0\") {\n    pass()\n  } else {\n    fail(\"Remember, you are only supposed to put the answer in the box. Do\n    **NOT** put the `[1]` as part of your answer, and only put the answer\n    in the box.  No extra text. {random_encouragement()}\")\n  }\n})\n```\n:::\n\n\nLast one: Even though I only asked you to use integers when you played with\nit works the same for fractional values... so what is `7.1 %% 0.2`{.r}?\n\n\n::: {.cell caption='Exercise 9' exercise='e9'}\n```{webr}\n#| caption: Exercise 9\n#| exercise: e9\n#| output: false\n```\n:::\n\n\n::: { .solution exercise=\"e9\" }\n\n::: {.cell exercise='e9' solution='true'}\n```{webr}\n#| exercise: e9\n#| solution: true\n0.1\n```\n:::\n\n:::\n\n\n::: {.cell exercise='e9' check='true'}\n```{webr}\n#| exercise: e9\n#| check: true\ngradethis::grade_this({\n  if (.user_code == \"0.1\") {\n    pass()\n  } else {\n    fail(\"It is tricky, but write it out and solve it like a long division\n    problem. {random_encouragement()}\")\n  }\n})\n```\n:::\n\n\n\n::: {.cell exercise='e9' type='open-on-pass'}\n```{adm}\n#| exercise: e9\n#| type: open-on-pass\nIt seems you figured out that the `%%`{.r} operator finds the remainder of\ndividing one number by another! This function is also called the modulo\noperator.  Where in daily life do you use this operator relatively frequently\nand probably without much thought? Any ideas?\n```\n:::\n\n\n\n## Evaluation\n\n### Submit Your Assignment\n\n\n::: {.cell type='progress-submit'}\n```{adm}\n#| type: progress-submit\n```\n:::\n\n::: {#adm-progress-submit}\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n.progress_submit(\"01-Rithmatic\", 9)\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}