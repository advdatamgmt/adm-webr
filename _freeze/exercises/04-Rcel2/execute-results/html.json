{
  "hash": "7c61ce74526559e172dbfb1c50960ec5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rcel, Part 2\"\norder: 400\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Exposition\n\n### Introduction\n\nIn the first part of this exercise we learned about `vector`{.r} and `factor`{.r} which are two composite data types as we build toward a `data.frame`{.r}. As you recall, a `vector`{.r} requires that each element to be of the same atomic data type.\n\nNow, we meet the first composite R data type that can contain different atomic types as elements simultaneously: `list`{.r}. A specialized `list`{.r} called `data.frame`{.r} will be used to store our datasets and will allow us to operate on our datasets as spreadsheet-like objects.\n\n### Lists\n\nStarting with `list`{.r}, a `list`{.r} allows you to mix ‘n’ match atomic data types. You build a list with the function `list`{.r}, like this:\n\n`l <- list(\"A\", 2, TRUE)`{.r}\n\nSee the subtle difference between `l`{.r} (\"ell\") and `1`{.r} (\"one\"). Notice that there is also a difference between `O` (\"oh\") and `0` (\"zero\"). This is important so keep an eye out for it throughout this lesson.\n\nTry creating `l` with the expression above now.\n\n\n::: {.cell caption='Exercise 1' exercise='e1' envir='env1'}\n```{webr}\n#| caption: Exercise 1\n#| exercise: e1\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e1\"}\n::: {.callout-note collapse=\"false\"}\nType `l <- list(\"A\", 2, TRUE)`{.r}.\n:::\n:::\n\n::: {.solution exercise=\"e1\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e1' solution='true'}\n```{webr}\n#| exercise: e1\n#| solution: true\nl <- list(\"A\", 2, TRUE)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e1' check='true'}\n```{webr}\n#| exercise: e1\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nTo extract an element from a `list`{.r}, use double square brackets. For example, `l[[1]]`{.r} will extract the first element of `l`{.r}.\n\nTry it now.\n\n\n::: {.cell caption='Exercise 2' exercise='e2' envir='env1'}\n```{webr}\n#| caption: Exercise 2\n#| exercise: e2\n#| envir: env1\n```\n:::\n\n\n::: {.solution exercise=\"e2\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e2' solution='true'}\n```{webr}\n#| exercise: e2\n#| solution: true\nl[[1]]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e2' check='true'}\n```{webr}\n#| exercise: e2\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow test if the first element of `l`{.r} really is a character.\n\n\n::: {.cell caption='Exercise 3' exercise='e3' envir='env1'}\n```{webr}\n#| caption: Exercise 3\n#| exercise: e3\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e3\"}\n::: {.callout-note collapse=\"false\"}\nUse `is.character`{.r}, `l`{.r}, and `[[1]]` somehow.\n:::\n:::\n\n::: {.solution exercise=\"e3\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e3' solution='true'}\n```{webr}\n#| exercise: e3\n#| solution: true\nis.character(l[[1]])\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e3' check='true'}\n```{webr}\n#| exercise: e3\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow test if the second element of `l`{.r} really is numeric.\n\n\n::: {.cell caption='Exercise 4' exercise='e4' envir='env1'}\n```{webr}\n#| caption: Exercise 4\n#| exercise: e4\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e4\"}\n::: {.callout-note collapse=\"false\"}\nUse `is.numeric`{.r}, `l`{.r}, and `[[2]]` somehow.\n:::\n:::\n\n::: {.solution exercise=\"e4\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e4' solution='true'}\n```{webr}\n#| exercise: e4\n#| solution: true\nis.numeric(l[[2]])\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e4' check='true'}\n```{webr}\n#| exercise: e4\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow check if the third element of `l`{.r} really is logical.\n\n\n::: {.cell caption='Exercise 5' exercise='e5' envir='env1'}\n```{webr}\n#| caption: Exercise 5\n#| exercise: e5\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e5\"}\n::: {.callout-note collapse=\"false\"}\nUse `is.logical`{.r}, `l`{.r}, and `[[3]]` somehow.\n:::\n:::\n\n::: {.solution exercise=\"e5\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e5' solution='true'}\n```{webr}\n#| exercise: e5\n#| solution: true\nis.logical(l[[3]])\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e5' check='true'}\n```{webr}\n#| exercise: e5\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nFinally, what function do you think checks if something really is a list? Try it now on `l`{.r}.\n\n\n::: {.cell caption='Exercise 6' exercise='e6' envir='env1'}\n```{webr}\n#| caption: Exercise 6\n#| exercise: e6\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e6\"}\n::: {.callout-note collapse=\"false\"}\n`is.list`{.r}?\n:::\n:::\n\n::: {.solution exercise=\"e6\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e6' solution='true'}\n```{webr}\n#| exercise: e6\n#| solution: true\nis.list(l)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e6' check='true'}\n```{webr}\n#| exercise: e6\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nEach element does not have to be a single atomic value. You can use longer vectors.\n\nReassign `l`{.r} to be `list(\"A\", c(1,3,2,4), TRUE)`{.r}.\n\n\n::: {.cell caption='Exercise 7' exercise='e7' envir='env1'}\n```{webr}\n#| caption: Exercise 7\n#| exercise: e7\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e7\"}\n::: {.callout-note collapse=\"false\"}\nType `l <- list(\"A\", c(1,3,2,4), TRUE)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e7\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e7' solution='true'}\n```{webr}\n#| exercise: e7\n#| solution: true\nl <- list(\"A\", c(1,3,2,4), TRUE)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e7' check='true'}\n```{webr}\n#| exercise: e7\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow examine the value of `l`{.r} and notice how R gives you hints about how to access the elements.\n\n\n::: {.cell caption='Exercise 8' exercise='e8' envir='env1'}\n```{webr}\n#| caption: Exercise 8\n#| exercise: e8\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e8\"}\n::: {.callout-note collapse=\"false\"}\nNothing more than just typing `l`{.r} (\"ell\").\n:::\n:::\n\n::: {.solution exercise=\"e8\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e8' solution='true'}\n```{webr}\n#| exercise: e8\n#| solution: true\nl\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e8' check='true'}\n```{webr}\n#| exercise: e8\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow examine the second element of `l`{.r}.\n\n\n::: {.cell caption='Exercise 9' exercise='e9' envir='env1'}\n```{webr}\n#| caption: Exercise 9\n#| exercise: e9\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e9\"}\n::: {.callout-note collapse=\"false\"}\nDon't forget the double bracket!\n:::\n:::\n\n::: {.solution exercise=\"e9\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e9' solution='true'}\n```{webr}\n#| exercise: e9\n#| solution: true\nl[[2]]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e9' check='true'}\n```{webr}\n#| exercise: e9\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou can also name the elements in a `list`{.r} like this:\n\n`l2 <- list(a = \"A\", b = c(1, 3, 2, 4), c = TRUE)`{.r}\n\nTry it now.\n\n\n::: {.cell caption='Exercise 10' exercise='e10' envir='env2'}\n```{webr}\n#| caption: Exercise 10\n#| exercise: e10\n#| envir: env2\n```\n:::\n\n\n::: {.hint exercise=\"e10\"}\n::: {.callout-note collapse=\"false\"}\nType `l2 <- list(a = \"A\", b = c(1, 3, 2, 4), c = TRUE)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e10\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e10' solution='true'}\n```{webr}\n#| exercise: e10\n#| solution: true\nl2 <- list(a = \"A\", b = c(1, 3, 2, 4), c = TRUE)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e10' check='true'}\n```{webr}\n#| exercise: e10\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow examine the value of `l2`{.r} and notice how R gives you hints about how to access the elements.\n\n\n::: {.cell caption='Exercise 11' exercise='e11' envir='env2'}\n```{webr}\n#| caption: Exercise 11\n#| exercise: e11\n#| envir: env2\n```\n:::\n\n\n::: {.hint exercise=\"e11\"}\n::: {.callout-note collapse=\"false\"}\nType `l2`{.r}, that is ell two (`l2`) not twelve (`12`).\n:::\n:::\n\n::: {.solution exercise=\"e11\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e11' solution='true'}\n```{webr}\n#| exercise: e11\n#| solution: true\nl2\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e11' check='true'}\n```{webr}\n#| exercise: e11\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nSo, those hints tell you to use a dollar sign to access the element by name. For example, to access the logical value in `l2`{.r}, type `l2$c`{.r}.\n\n\n::: {.cell caption='Exercise 12' exercise='e12' envir='env2'}\n```{webr}\n#| caption: Exercise 12\n#| exercise: e12\n#| envir: env2\n```\n:::\n\n\n::: {.hint exercise=\"e12\"}\n::: {.callout-note collapse=\"false\"}\nType `l2$c`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e12\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e12' solution='true'}\n```{webr}\n#| exercise: e12\n#| solution: true\nl2$c\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e12' check='true'}\n```{webr}\n#| exercise: e12\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nWith a `vector`{.r} recall that you can assign to a specific element. Let's create a vector to try this with. Type `x <- c(1, 3, 2, 4)`{.r}.\n\n\n::: {.cell caption='Exercise 13' exercise='e13' envir='env3'}\n```{webr}\n#| caption: Exercise 13\n#| exercise: e13\n#| envir: env3\n```\n:::\n\n\n::: {.hint exercise=\"e13\"}\n::: {.callout-note collapse=\"false\"}\nType `x <- c(1, 3, 2, 4)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e13\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e13' solution='true'}\n```{webr}\n#| exercise: e13\n#| solution: true\nx <- c(1, 3, 2, 4)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e13' check='true'}\n```{webr}\n#| exercise: e13\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nIf we wanted to reassign the second element to be 100, what would we do?\n\n\n::: {.cell caption='Exercise 14' exercise='e14' envir='env3'}\n```{webr}\n#| caption: Exercise 14\n#| exercise: e14\n#| envir: env3\n```\n:::\n\n\n::: {.hint exercise=\"e14\"}\n::: {.callout-note collapse=\"false\"}\nType `x[2] <- 100`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e14\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e14' solution='true'}\n```{webr}\n#| exercise: e14\n#| solution: true\nx[2] <- 100\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e14' check='true'}\n```{webr}\n#| exercise: e14\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow examine `x`{.r} to check the result.\n\n\n::: {.cell caption='Exercise 15' exercise='e15' envir='env3'}\n```{webr}\n#| caption: Exercise 15\n#| exercise: e15\n#| envir: env3\n```\n:::\n\n\n::: {.hint exercise=\"e15\"}\n::: {.callout-note collapse=\"false\"}\nType `x`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e15\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e15' solution='true'}\n```{webr}\n#| exercise: e15\n#| solution: true\nx\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e15' check='true'}\n```{webr}\n#| exercise: e15\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow, change the third element of `x`{.r} to 5.\n\n\n::: {.cell caption='Exercise 16' exercise='e16' envir='env3'}\n```{webr}\n#| caption: Exercise 16\n#| exercise: e16\n#| envir: env3\n```\n:::\n\n\n::: {.hint exercise=\"e16\"}\n::: {.callout-note collapse=\"false\"}\nType `x[3] <- 5`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e16\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e16' solution='true'}\n```{webr}\n#| exercise: e16\n#| solution: true\nx[3] <- 5\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e16' check='true'}\n```{webr}\n#| exercise: e16\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou can also assign to parts of a list. Let's remember what `l`{.r} looks like first. Type `l`{.r}.\n\n\n::: {.cell caption='Exercise 17' exercise='e17' envir='env1'}\n```{webr}\n#| caption: Exercise 17\n#| exercise: e17\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e17\"}\n::: {.callout-note collapse=\"false\"}\nType `l`{.r} (\"ell\")\n:::\n:::\n\n::: {.solution exercise=\"e17\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e17' solution='true'}\n```{webr}\n#| exercise: e17\n#| solution: true\nl\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e17' check='true'}\n```{webr}\n#| exercise: e17\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nSo if I wanted to assign to the 3rd element of the `vector`{.r} that is the\n2nd element of `l`{.r}, what would one do?  Start by telling me what the\nsecond element of `l`{.r} is?\n\n\n::: {.cell caption='Exercise 18' exercise='e18' envir='env1'}\n```{webr}\n#| caption: Exercise 18\n#| exercise: e18\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e18\"}\n::: {.callout-note collapse=\"false\"}\nType `l[[2]]`{.r} (don't forget the double brackets)\n:::\n:::\n\n::: {.solution exercise=\"e18\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e18' solution='true'}\n```{webr}\n#| exercise: e18\n#| solution: true\nl[[2]]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e18' check='true'}\n```{webr}\n#| exercise: e18\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n`l[[2]]`{.r} is a `vector`{.r}.  I want the third element.  I use single square\nbrackets to get an element.  If I tell you that you can treat `l[[2]]`\njust like the name for that `vector`{.r} what would you type to get the third\nelement?\n\n\n\n::: {.cell caption='Exercise 19' exercise='e19' envir='env1'}\n```{webr}\n#| caption: Exercise 19\n#| exercise: e19\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e19\"}\n::: {.callout-note collapse=\"false\"}\nType `l[[2]][3]`{.r}. If you didn't get it, let's talk more about it in class.\n:::\n:::\n\n::: {.solution exercise=\"e19\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e19' solution='true'}\n```{webr}\n#| exercise: e19\n#| solution: true\nl[[2]][3]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e19' check='true'}\n```{webr}\n#| exercise: e19\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow, change that same value to 42.\n\n\n::: {.cell caption='Exercise 20' exercise='e20' envir='env1'}\n```{webr}\n#| caption: Exercise 20\n#| exercise: e20\n#| envir: env1\n```\n:::\n\n\n::: {.hint exercise=\"e20\"}\n::: {.callout-note collapse=\"false\"}\nUse `l[[2]][3]`, the assignment operator (`<-`), and 42.\n:::\n:::\n\n::: {.solution exercise=\"e20\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e20' solution='true'}\n```{webr}\n#| exercise: e20\n#| solution: true\nl[[2]][3] <- 42\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e20' check='true'}\n```{webr}\n#| exercise: e20\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n### Dataframes\n\nNow, to the last major data type that we are going to learn about in this course, the `data.frame`{.r}. A `data.frame`{.r} is a specialized list where all the elements of the list have equal length. It is perfect for representing data where there are several values (in columns) per observation (in rows).\n\nYou create a `data.frame`{.r} with the `data.frame`{.r} function. Type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(age = c(3, 2, 3, 3, 1, 2, 4, 4), \n                 sex = factor(c(\"m\", \"f\", \"m\", \"f\", \"m\", \"f\", \"m\", \"f\")), \n                 sorethroat = factor(c(\"no\", \"no\", \"no\", \"no\", \"yes\", \n                                       \"yes\", \"yes\", \"yes\")\n                                    )\n                )\n```\n:::\n\n\nHere, the places that I put the line endings are not strictly required; they are\nthere to help clarity with where the parentheses open and close.\n\n\n::: {.cell caption='Exercise 21' exercise='e21' envir='env4'}\n```{webr}\n#| caption: Exercise 21\n#| exercise: e21\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e21\"}\n::: {.callout-note collapse=\"false\"}\nJust type it out carefully. I know it is a pain, but it will make you appreciate the other ways we will create these in the future!\n:::\n:::\n\n::: {.solution exercise=\"e21\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e21' solution='true'}\n```{webr}\n#| exercise: e21\n#| solution: true\ndf <- data.frame(age = c(3, 2, 3, 3, 1, 2, 4, 4), sex = factor(c(\"m\", \"f\", \"m\", \"f\", \"m\", \"f\", \"m\", \"f\")), sorethroat = factor(c(\"no\", \"no\", \"no\", \"no\", \"yes\", \"yes\", \"yes\", \"yes\")))\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e21' check='true'}\n```{webr}\n#| exercise: e21\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow type `df`{.r} to take a look at your new data.frame!\n\n\n::: {.cell caption='Exercise 22' exercise='e22' envir='env4'}\n```{webr}\n#| caption: Exercise 22\n#| exercise: e22\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e22\"}\n::: {.callout-note collapse=\"false\"}\nType `df`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e22\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e22' solution='true'}\n```{webr}\n#| exercise: e22\n#| solution: true\ndf\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e22' check='true'}\n```{webr}\n#| exercise: e22\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nOK, do you remember how to access the element of a list by name? The `$` right? So how could you get just the age column out of `df`{.r}?\n\n\n::: {.cell caption='Exercise 23' exercise='e23' envir='env4'}\n```{webr}\n#| caption: Exercise 23\n#| exercise: e23\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e23\"}\n::: {.callout-note collapse=\"false\"}\nDoes `df$age`{.r} make sense?\n:::\n:::\n\n::: {.solution exercise=\"e23\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e23' solution='true'}\n```{webr}\n#| exercise: e23\n#| solution: true\ndf$age\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e23' check='true'}\n```{webr}\n#| exercise: e23\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou can also use `summary`{.r} on data.frames. Try it now on `df`{.r}.\n\n\n::: {.cell caption='Exercise 24' exercise='e24' envir='env4'}\n```{webr}\n#| caption: Exercise 24\n#| exercise: e24\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e24\"}\n::: {.callout-note collapse=\"false\"}\nDoes `summary(df)`{.r} make sense?\n:::\n:::\n\n::: {.solution exercise=\"e24\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e24' solution='true'}\n```{webr}\n#| exercise: e24\n#| solution: true\nsummary(df)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e24' check='true'}\n```{webr}\n#| exercise: e24\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou can check what variables are in a `data.frame`{.r} like this (it also works for a list): `names(df)`{.r}. Try it now.\n\n\n::: {.cell caption='Exercise 25' exercise='e25' envir='env4'}\n```{webr}\n#| caption: Exercise 25\n#| exercise: e25\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e25\"}\n::: {.callout-note collapse=\"false\"}\nType `names(df)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e25\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e25' solution='true'}\n```{webr}\n#| exercise: e25\n#| solution: true\nnames(df)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e25' check='true'}\n```{webr}\n#| exercise: e25\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nThere are several ways to access elements in a `data.frame`{.r} and each will be useful somewhere as we get better at programming. We can access a single value by row and column. Rows first, columns second. Try `df[2, 3]`{.r}.\n\n\n::: {.cell caption='Exercise 26' exercise='e26' envir='env4'}\n```{webr}\n#| caption: Exercise 26\n#| exercise: e26\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e26\"}\n::: {.callout-note collapse=\"false\"}\nType `df[2, 3]`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e26\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e26' solution='true'}\n```{webr}\n#| exercise: e26\n#| solution: true\ndf[2, 3]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e26' check='true'}\n```{webr}\n#| exercise: e26\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nIf we leave out the column specification, you get the whole row: `df[2, ]`{.r}. Try it.\n\n\n::: {.cell caption='Exercise 27' exercise='e27' envir='env4'}\n```{webr}\n#| caption: Exercise 27\n#| exercise: e27\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e27\"}\n::: {.callout-note collapse=\"false\"}\nType `df[2, ]`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e27\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e27' solution='true'}\n```{webr}\n#| exercise: e27\n#| solution: true\ndf[2, ]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e27' check='true'}\n```{webr}\n#| exercise: e27\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nIf we leave out the row specification, you get the whole column: `df[, 3]`{.r}. Try it.\n\n\n::: {.cell caption='Exercise 28' exercise='e28' envir='env4'}\n```{webr}\n#| caption: Exercise 28\n#| exercise: e28\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e28\"}\n::: {.callout-note collapse=\"false\"}\nType `df[, 3]`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e28\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e28' solution='true'}\n```{webr}\n#| exercise: e28\n#| solution: true\ndf[, 3]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e28' check='true'}\n```{webr}\n#| exercise: e28\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nYou can also use the column name instead of the index when you are accessing elements or columns. An example would be: `df[, \"sorethroat\"]`{.r}. Try it.\n\n\n::: {.cell caption='Exercise 29' exercise='e29' envir='env4'}\n```{webr}\n#| caption: Exercise 29\n#| exercise: e29\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e29\"}\n::: {.callout-note collapse=\"false\"}\nType `df[, \"sorethroat\"]`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e29\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e29' solution='true'}\n```{webr}\n#| exercise: e29\n#| solution: true\ndf[, \"sorethroat\"]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e29' check='true'}\n```{webr}\n#| exercise: e29\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nFinally, you can use the `subset`{.r} command to find rows that match certain criteria. Try `subset(df, age == 2)`{.r} to find the observations where the age of the subject is 2.\n\n\n::: {.cell caption='Exercise 30' exercise='e30' envir='env4'}\n```{webr}\n#| caption: Exercise 30\n#| exercise: e30\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e30\"}\n::: {.callout-note collapse=\"false\"}\nType `subset(df, age == 2)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e30\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e30' solution='true'}\n```{webr}\n#| exercise: e30\n#| solution: true\nsubset(df, age == 2)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e30' check='true'}\n```{webr}\n#| exercise: e30\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n## Experimentation\n\nNow try to combine your knowledge of the `&`, `|`, and `!` operators (you may only need one of those) to find those subjects who are both age 2 and have a sorethroat using the `subset`{.r} function. \n\n\n::: {.cell caption='Exercise 31' exercise='e31' envir='env4'}\n```{webr}\n#| caption: Exercise 31\n#| exercise: e31\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e31\"}\n::: {.callout-note collapse=\"false\"}\nThe wording implies and (`&`) and don't forget the quotes around `\"yes\"`{.r} for sorethroat because you are accessing by a character type not a variable name.\n:::\n:::\n\n::: {.solution exercise=\"e31\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e31' solution='true'}\n```{webr}\n#| exercise: e31\n#| solution: true\nsubset(df, age == 2 & sorethroat == \"yes\")\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e31' check='true'}\n```{webr}\n#| exercise: e31\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nWhat comes out of the `subset`{.r} function is a `data.frame`{.r} that you can further subset using the operators you already know. For example, try `subset(df, sorethroat == \"yes\")$age`{.r}.\n\n\n::: {.cell caption='Exercise 32' exercise='e32' envir='env4'}\n```{webr}\n#| caption: Exercise 32\n#| exercise: e32\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e32\"}\n::: {.callout-note collapse=\"false\"}\nType `subset(df, sorethroat == \"yes\")$age`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e32\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e32' solution='true'}\n```{webr}\n#| exercise: e32\n#| solution: true\nsubset(df, sorethroat == \"yes\")$age\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e32' check='true'}\n```{webr}\n#| exercise: e32\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nAnd we can apply functions to that like `summary`, e.g., `summary(subset(df, sorethroat == \"yes\")$age)`{.r}. Try it.\n\n\n::: {.cell caption='Exercise 33' exercise='e33' envir='env4'}\n```{webr}\n#| caption: Exercise 33\n#| exercise: e33\n#| envir: env4\n```\n:::\n\n\n::: {.hint exercise=\"e33\"}\n::: {.callout-note collapse=\"false\"}\nType `summary(subset(df, sorethroat == \"yes\")$age)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e33\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e33' solution='true'}\n```{webr}\n#| exercise: e33\n#| solution: true\nsummary(subset(df, sorethroat == \"yes\")$age)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e33' check='true'}\n```{webr}\n#| exercise: e33\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nR has a lot of built in data.frames. One we'll use a lot in this course is the `esoph`{.r} dataset. You load it with `data(esoph)`{.r}. Do that now.\n\n\n::: {.cell caption='Exercise 34' exercise='e34' envir='env5'}\n```{webr}\n#| caption: Exercise 34\n#| exercise: e34\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e34\"}\n::: {.callout-note collapse=\"false\"}\nType `data(esoph)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e34\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e34' solution='true'}\n```{webr}\n#| exercise: e34\n#| solution: true\ndata(esoph)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e34' check='true'}\n```{webr}\n#| exercise: e34\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nNow that it is loaded (under the name `esoph`{.r}) use `summary`{.r} to examine it.\n\n\n::: {.cell caption='Exercise 35' exercise='e35' envir='env5'}\n```{webr}\n#| caption: Exercise 35\n#| exercise: e35\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e35\"}\n::: {.callout-note collapse=\"false\"}\nType `summary(esoph)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e35\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e35' solution='true'}\n```{webr}\n#| exercise: e35\n#| solution: true\nsummary(esoph)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e35' check='true'}\n```{webr}\n#| exercise: e35\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nExtract `esoph`'s 4th row.\n\n\n::: {.cell caption='Exercise 36' exercise='e36' envir='env5'}\n```{webr}\n#| caption: Exercise 36\n#| exercise: e36\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e36\"}\n::: {.callout-note collapse=\"false\"}\nType `esoph[4, ]`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e36\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e36' solution='true'}\n```{webr}\n#| exercise: e36\n#| solution: true\nesoph[4, ]\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e36' check='true'}\n```{webr}\n#| exercise: e36\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\nList the variable names in `esoph`{.r}.\n\n\n::: {.cell caption='Exercise 37' exercise='e37' envir='env5'}\n```{webr}\n#| caption: Exercise 37\n#| exercise: e37\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e37\"}\n::: {.callout-note collapse=\"false\"}\nType `names(esoph)`{.r}\n:::\n:::\n\n::: {.solution exercise=\"e37\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e37' solution='true'}\n```{webr}\n#| exercise: e37\n#| solution: true\nnames(esoph)\n```\n:::\n\n:::\n:::\n\n\n::: {.cell exercise='e37' check='true'}\n```{webr}\n#| exercise: e37\n#| check: true\ngradethis::grade_this_code()\n```\n:::\n\n\n`esoph`{.r} is in a case-control format where each row represents multiple cases and controls, in variables named `ncases`{.r} and `ncontrols`{.r}. So, if you are asked how many observations there are you’d add the number of cases and controls.\n\nSo, write code that will give the number of cases which have tobacco consumption (`tobgp`) of 30+ gm/day. You’ll find the function `sum`{.r} helpful, which takes a vector and adds it up. You'll use it in a pattern just like you did with `summary` above on a column of a subset. \n\n\n::: {.cell caption='Exercise 38' exercise='e38' envir='env5'}\n```{webr}\n#| caption: Exercise 38\n#| exercise: e38\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e38\"}\n::: {.callout-note collapse=\"false\"}\n`subset(esoph, tobgp == \"30+\")`{.r} is the kernel of what you need. Then, that is a little `data.frame`{.r} from which you need the variable `ncases`{.r} and you then need to add it up - how do you put it all together?\n:::\n:::\n\n::: {.solution exercise=\"e38\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e38' solution='true'}\n```{webr}\n#| exercise: e38\n#| solution: true\n```\n:::\n\nA couple of examples that work are `sum(subset(esoph, tobgp == \"30+\")$ncases)`\nand `sum(esoph$ncases[esoph$tobgp == \"30+\"])`.\n:::\n:::\n\n\n::: {.cell exercise='e38' check='true'}\n```{webr}\n#| exercise: e38\n#| check: true\ngradethis::grade_this(\n    if(.user == sum(subset(esoph, tobgp == \"30+\")$ncases) && \n       grepl(\"ncases\", .user_code)) {\n       pass()\n    } else {\n        fail(\"There are at least a couple of solutions. Don't give up!\")\n    }\n)\n```\n:::\n\n\nOK, here is your most challenging problem yet. What is the number of observations (`ncases`{.r} + `ncontrols`{.r}) where both the age group (`agegp`) is 25-34 years and tobacco consumption is 10-19 gm/day?\n\n\n::: {.cell caption='Exercise 39' exercise='e39' envir='env5'}\n```{webr}\n#| caption: Exercise 39\n#| exercise: e39\n#| envir: env5\n```\n:::\n\n\n::: {.hint exercise=\"e39\"}\n::: {.callout-note collapse=\"false\"}\nDon't overthink it. It is a straightforward extension of the last problem. Calculate each of the two pieces separately even though it requires repetition and simply add them together with `+`{.r} is one solution.\n:::\n:::\n\n::: {.solution exercise=\"e39\"}\n::: {.callout-note collapse=\"false\"}\n\n::: {.cell exercise='e39' solution='true'}\n```{webr}\n#| exercise: e39\n#| solution: true\n```\n:::\n\nSome things that work are `sum(subset(esoph, agegp == \"25-34\" & tobgp == \"10-19\")$ncases) + sum(subset(esoph, agegp == \"25-34\" & tobgp == \"10-19\")$ncontrols)`, `sum(subset(esoph, agegp == \"25-34\" & tobgp == \"10-19\")[, c(\"ncases\", \"ncontrols\")])`, and `sum(esoph$ncases[esoph$agegp == \"25-34\" & esoph$tobgp == \"10-19\"],esoph$ncontrols[esoph$agegp == \"25-34\" & esoph$tobgp == \"10-19\"])`.\n:::\n:::\n\n\n::: {.cell exercise='e39' check='true'}\n```{webr}\n#| exercise: e39\n#| check: true\ngradethis::grade_this(\n    if(.user == sum(subset(esoph, agegp == \"25-34\" & tobgp == \"10-19\")[, c(\"ncases\", \"ncontrols\")]) && \n       grepl(\"ncases\", .user_code)) {\n       pass()\n    } else {\n        fail(\"There are at few possible solutions. Don't give up!\")\n    }\n)\n```\n:::\n\n\n## Evaluation\n\n### Submit Your Assignment\n\nSubmit your assignment below.\n\n\n::: {.cell type='progress-submit'}\n```{adm}\n#| type: progress-submit\n```\n:::\n\n::: {#adm-progress-submit}\n\n::: {.cell autorun='true'}\n```{webr}\n#| autorun: true\n.progress_submit(\"04-Rcel2\", 39)\n```\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}