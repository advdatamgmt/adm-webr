{
  "hash": "613698fc349c1a5bbdf1a2f8e8aa9b36",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic Table Example\"\norder: 925\nwebr:\n  packages:\n    - tidyverse\n  cell-options:\n    autorun: true\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Introduction\n\nHerein a table is presented that would be suitable for inclusion in the\nfinal project or to be used in a manuscript.\n\nThe table creation process involves some data manipulation, but most importantly\nthe data is formatted for presentation in a document, e.g., with a reasonable\nnumber of decimal places.  \n\nI will demonstrate using the builtin `iris` dataset which hase data on iris\nflower measurements (sepal length, sepal width, petal length, petal width) for\nthree species of iris flowers.\n\nI'll create a summary table with means and standard deviations for each\nof the four measurement variables, stratified by species, using the \ntechniques we used in the [earlier exercise](07-Food-Prep.qmd).\nBut I will also show you how to do the same thing using `tidyverse` functions.\n\nOk, let's load the `tidyverse` package and the `iris` dataset.\n\n\n::: {.cell}\n```{webr}\nlibrary(tidyverse)\ndata(iris)\n```\n:::\n\n\nTake a look at what `iris` looks like before we summarize it.\n\n\n::: {.cell}\n```{webr}\nhead(iris)\nsummary(iris)\n```\n:::\n\n\nNow, let's create two helper functions to format means and standard deviations \nfor our tables.\n\n\n::: {.cell}\n```{webr}\nfmt_mean <- function(x) sprintf(\"%.2f\", mean(x, na.rm = TRUE))\nfmt_stddev <- function(x) sprintf(\"(%.2f)\", sd(x, na.rm = TRUE))\n```\n:::\n\n\n## Create the summary table without tidyverse\n\nNow let's create the summary table without using `tidyverse` functions and \nwithout some more advanced base R programming techniques we will learn later.\n\nLet's split the `data.frame` into three `data.frame`s, one per species using\na `for` loop.\n\n\n::: {.cell}\n```{webr}\nspecies_names <- unique(iris$Species)\nfor (sp in species_names) {\n  assign(paste0(\"iris_\", sp), subset(iris, Species == sp))\n}\n```\n:::\n\n\nUse our helper functions to create summary tables for each species and using\nsome loops to simplify our work a bit (and make it less error prone)\n\n\n::: {.cell}\n```{webr}\nflower_features <- c(\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\")\n\nfor (sp in species_names) {\n  df <- get(paste0(\"iris_\", sp))\n  fmt_df <- data.frame(feature = character(), mean = character(), sd = character())\n\n  for (feat in flower_features) {\n    mean_val <- fmt_mean(df[[feat]])\n    sd_val <- fmt_stddev(df[[feat]])\n    fmt_df <- rbind(fmt_df, data.frame(feature = feat, mean = mean_val, sd = sd_val))\n  }\n\n  assign(paste0(\"fmt_\", sp), fmt_df)\n}\nfmt_setosa\nfmt_versicolor\nfmt_virginica\n```\n:::\n\n\nLet's `cbind` these three summary tables together to create one big table.\nAlthough `cbind` is usually not recommended, it works fine here because we know\nthat the rows are in the same order and we just want to present them side by side\nso that we can construct our table vs. use this data for subsequent analysis.\n\n\n::: {.cell}\n```{webr}\n\n\nfmt_table <- data.frame(feature = flower_features)\n\nfor (sp in species_names) {\n  fmt_table <- cbind(fmt_table,\n                     get(paste0(\"fmt_\", sp))[ , c(\"mean\", \"sd\")])\n}\nfmt_table\n```\n:::\n\n\nPerfect!  Now, let's make it into HTML without the first column, so it's easy to \ncopy and paste into our [Word table shell](../_static/iris_table.docx). \n\n\n::: {.cell}\n```{webr}\nknitr::kable(fmt_table[ , -1])\n```\n:::\n\n\n## Create the summary table with tidyverse\n\n\n::: {.cell}\n```{webr}\niris %>%\n  group_by(Species) %>%\n  summarize(across(everything(), c(m = fmt_mean, sd = fmt_stddev))) %>%\n  pivot_longer(-Species) %>%\n  separate(name, c(\"feature\", \"stat\"), sep = \"_\") %>%\n  pivot_wider(names_from=c(Species, stat)) %>%\n  select(-feature)\n```\n:::\n\n\nIs it easier to make?  Not necessarily. I needed to experiment quite a bit\nto get what I wanted and had to rely on help files considerably even though I\nhave substantial familiarity with the `tidyverse` ecosystem.  Instead of a core\nset of base functions that you can mix and match, you need to be familiar with \nthe spectrum of `tidyverse` verbs and their usage and default parameters, \nincluding functions like `across`, `separate`, and `pivot_wider` that are quite \ntricky to get right. Once you have it right though, it is quite easy to read and \nunderstand.\n\nTo create the table \"meat\" as we did above, we can just feed that directly into\n`knitr::kable`.\n\n\n\n::: {.cell}\n```{webr}\niris %>%\n  group_by(Species) %>%\n  summarize(across(everything(), c(m = fmt_mean, sd = fmt_stddev))) %>%\n  pivot_longer(-Species) %>%\n  separate(name, c(\"feature\", \"stat\"), sep = \"_\") %>%\n  pivot_wider(names_from=c(Species, stat)) %>%\n  select(-feature) %>%\n  knitr::kable()\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}