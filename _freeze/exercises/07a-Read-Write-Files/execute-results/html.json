{
  "hash": "98ebd18f31915d59e72d1d080c58fa63",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Input and Output Files\"\norder: 750\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\nwebr::install(\"gradethis\", quiet = TRUE)\nlibrary(gradethis)\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n  }\n})\n```\n:::\n\n\n\n\n::: {.cell edit='false'}\n```{webr}\n#| edit: false\n#| output: false\n###########################################################\n# if you edit this section note there is an `r` block below too\n.course_id <- readLines(\"_static/data/course_id.txt\")\n.assignment_ids <- dget(\"_static/data/assignment_ids.txt\")\n.canvas_link <- function(a) glue::glue(\"https://canvas.emory.edu/courses/{.course_id}/assignments/{.assignment_ids[{a}]}\")\n############################################################\n.webr_progress <- data.frame(label = character(), user_code = character(), solution_code = character(), result = logical())\noptions(webr.exercise.checker = function(\n  label, user_code, solution_code, check_code, envir_result, evaluate_result,\n  envir_prep, last_value, engine, stage, ...\n) {\n  if (is.null(check_code)) {\n    # No grading code, so just skip grading\n    invisible(NULL)\n  } else if (is.null(label)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = \"All exercises must have a label.\"\n    )\n  } else if (is.null(solution_code)) {\n    list(\n      correct = FALSE,\n      type = \"warning\",\n      message = htmltools::tags$div(\n        htmltools::tags$p(\"A problem occurred grading this exercise.\"),\n        htmltools::tags$p(\n          \"No solution code was found. Note that grading exercises using the \",\n          htmltools::tags$code(\"gradethis\"),\n          \"package requires a model solution to be included in the document.\"\n        )\n      )\n    )\n  } else {\n    res <- gradethis::gradethis_exercise_checker(\n      label = label, solution_code = solution_code, user_code = user_code,\n      check_code = check_code, envir_result = envir_result,\n      evaluate_result = evaluate_result, envir_prep = envir_prep,\n      last_value = last_value, stage = stage, engine = engine)\n    .webr_progress <<- rbind(\n      .webr_progress,\n      data.frame(\n        label = label,\n        user_code = user_code,\n        solution_code = solution_code,\n        result = res$correct\n      )\n    )\n    res\n  }\n})\n.csv_data_uri <- function(df) {\n  enc_csv <- base64enc::base64encode(\n    charToRaw(\n      paste(\n        capture.output(\n          write.csv(df)),\n          collapse = \"\\n\")\n    )\n  )\n  glue::glue(\"data:text/csv;base64,{enc_csv}\")\n}\n.save_restore_progress <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::tags$a(\n      download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n      href = .csv_data_uri(df),\n      htmltools::tags$button(\n          #onClick = \"this.classList.add('clicked');\",\n          class = \"btn progress-submit\",\n          \"Save progress\",\n          .noWS = \"outside\"\n      )\n    ),\n    htmltools::tags$label(\n      `for` = \"restore-file-input\",\n      type = \"button\",\n      id = \"restore-progress-button\",\n      class = \"btn progress-submit btn-quarto\",\n      onClick = \"restore_listener();\",\n      \"Restore progress\"\n    ),\n    htmltools::tags$input(\n      type = \"file\",\n      id = \"restore-file-input\",\n      style = \"display: none\",\n      accept = \".csv\"\n    )\n  )\n}\n.steps_to_submit <- function(assignment_name, df = .webr_progress) {\n  now <- strftime(Sys.time(), \"%Y%m%d-%H%M%S\")\n  htmltools::div(\n    htmltools::p(\n      htmltools::strong(\"Steps to submit:\")\n    ),\n    htmltools::tags$ol(\n        htmltools::tags$li(\n        \"Save your work to your device by clicking: \",\n        htmltools::tags$a(\n            download = glue::glue('adm-{.assignment_ids[assignment_name]}-{now}.csv'),\n            href = .csv_data_uri(df),\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Download\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"Go to related Canvas assignment (note this will open a new tab or window and you may need to login) by clicking:\",\n        htmltools::tags$a(\n            href = .canvas_link(assignment_name),\n            target = \"_blank\",\n            htmltools::tags$button(\n                onClick = \"this.classList.add('clicked');\",\n                class=\"progress-submit\",\n                \"Open Canvas Assignment\"\n            )\n        )\n        ),\n        htmltools::tags$li(\n        \"On the page that just opened find and click on a button\",\n        \"that looks like this in the upper right corner:\",\n        htmltools::tags$img(\n            src = \"../_static/canvas_start_assignment.png\",\n            alt = \"Start Assignment Button\",\n            style = \"max-width: 200px; border: 1px solid black; margin-left: 1em;\"\n        )\n        ),\n        htmltools::tags$li(\n        htmltools::p(\"After you click you should see the following:\"),\n        htmltools::tags$img(\n            src = \"../_static/canvas_submission.png\",\n            alt = \"Submit Assignment Image\",\n            style = \"max-width: 400px; border: 1px solid black; margin-left: 5em;\"\n        ),\n        htmltools::p(\n            \"Either drag the file you saved in the first step or click \",\n            \"\\\"Choose a file to upload\\\" under the rocket drawing \",\n            \"to find the file.\"\n        )\n        ),\n        htmltools::tags$li(\n        \"Finally, click the \\\"Submit Assignment\\\" button.\"\n        )\n    )\n  )\n}\n.progress_submit <- function(assignment_name, n_exercises, progress_obj = .webr_progress) {\n  all <- as.character(1:n_exercises)\n  done <- gsub(\"e\", \"\", sort(unique(progress_obj$label[progress_obj$result])))\n  todo <- setdiff(all, done)\n  collapse_runs <- function(x) {\n    x <- as.integer(x)\n    out <- character()\n    for (i in seq_along(x)) {\n      if (i == 1) {\n        run_start <- run_end <- x[i]\n        next\n      }\n      if (x[i] == run_end + 1) {\n        run_end <- x[i]\n      } else {\n        if (run_start == run_end) {\n          out <- c(out, as.character(run_start))\n        } else {\n          out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n        }\n        run_start <- run_end <- x[i]\n      }\n    }\n    if (run_start == run_end) {\n      out <- c(out, as.character(run_start))\n    } else {\n      out <- c(out, glue::glue(\"{run_start}–{run_end}\"))\n    }\n    out\n  }\n  collapse_nums <- function(x) {\n    x <- collapse_runs(x)\n    if (length(x) == 1) {\n      return(x)\n    } else if (length(x) == 2) {\n      return(glue::glue(\"{x[1]} and {x[2]}\"))\n    } else {\n      return(glue::glue_collapse(x, \", \", last = \", and \"))\n    }\n  }\n  if (length(todo) > 0) {\n    htmltools::div(\n      htmltools::tags$p(\n        glue::glue(\n          \"Before you can submit you still need correctly complete exercises \",\n          collapse_nums(todo),\n          \".\"\n          ),\n          style = \"color: red; font-weight: bold;\"\n      ),\n      .save_restore_progress(assignment_name)\n    )\n  } else {\n    htmltools::div(\n      htmltools::p(\n        \"All done! You can submit now!\",\n        style = \"color: green; font-weight: bold;\"\n      ),\n    .steps_to_submit(assignment_name)\n    )\n  }\n}\n```\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n### Introduction\n\nThis is not a typical module.  Just a brief tutorial on getting datasets \nin and out of R as well as some file system related commands.  No grading\njust run each of the code chunks in order after you study each of them.\n\n### Excel files\n\nTo read Excel files you need to install the `readxl` package.\n\n\n::: {.cell}\n```{webr}\ninstall.packages('readxl')  # only need to do this once per installed version of R\n```\n:::\n\n\nTo read an Excel file into R, you load the `readxl` library once per R session,\nusually at the top of your R script.\n\n::: {.cell}\n```{webr}\nlibrary(readxl)  # only once per session\n```\n:::\n\n\nIf the library loads without error, you will not see any response and are now \nready to read Excel files. The Excel file we are going to use is a version \nof the `esoph` dataset named\n`esoph.xlsx` that lives in the `data` directory on this website.\n\nTo open that file, we use the `read_excel` function from the `readxl` package:\n\n::: {.cell}\n```{webr}\nxesoph <- read_excel(\"data/esoph.xlsx\")\n```\n:::\n\n\nNow we take a look at it:\n\n::: {.cell}\n```{webr}\nhead(xesoph)\n```\n:::\n\n\n### Comma Delimited Text Files\n\nComma delimited text or comma separated values (CSV) are a common text file \nformat for representing data.  You can use the \nbuiltin `read.csv` to read CSV files.  Let's read in the `iih.csv` file from \nthe same `data` directory:\n\n\n::: {.cell}\n```{webr}\niih <- read.csv(\"data/iih.csv\")\nhead(iih)\n```\n:::\n\n\nYour Excel program can open and write CSV too.\n\n### File system commands\n\nR is always working in a specific directory of your file system.  \nYou can figure out which one using `getwd` which means \"get working directory\":\n\n\n::: {.cell}\n```{webr}\ngetwd()\n```\n:::\n\n\nYou can change this directory using `setwd`. Let's move into the `data` directory\nfor a moment.\n\n::: {.cell}\n```{webr}\nsetwd(\"data\")\n```\n:::\n\n\nR will not reply if it works, but we can check that we are in the `data` directory\nby looking at `getwd` again:\n\n::: {.cell}\n```{webr}\ngetwd()\n```\n:::\n\n\nNow if we want to read in the `iih.csv` file we would do it like this:\n\n::: {.cell}\n```{webr}\niih <- read.csv(\"iih.csv\")\nhead(iih)\n```\n:::\n\n\nNote that we did not need to specify the `data/` part of the path \nbecause we were already in that directory. Now, let's go back to the parent \ndirectory of `data`:\n\n::: {.cell}\n```{webr}\nsetwd(\"..\")\n```\n:::\n\n\n`..` means the parent directory of the current directory while `.` means the \ncurrent directory.  This is standard across many operating systems.\n\nNow, look at `getwd` one more time:\n\n\n::: {.cell}\n```{webr}\ngetwd()\n```\n:::\n\n\nIdeally, we do not use these commands in our scripts because they can make\nour scripts less portable.  Ideally, we use projects in RStudio so that our working\ndirectory is always the project directory.  We will discuss that further\nin class, and you can read about it here too:\n\n<https://r4ds.hadley.nz/workflow-scripts.html#projects>\n\nHowever, when R cannot find something, it is often because you are not in the\ndirectory you think you are.  So, if you get an error reading a file,\nyou need make sure to check what directory you were working in using `getwd`{.r}.\n\nLikewise, if you write anything out, it will be in the working directory unless\nyou direct R otherwise.\n\n### Writing data files\n\nThere are write functions for CSV (which you can open in Excel easily).  Let's \ntry writing out the `iih` dataset we just read in and put it in the \n`data` directory:\n\n\n::: {.cell}\n```{webr}\nwrite.csv(iih, \"data/iih2.csv\")\n```\n:::\n\n\nBe careful, if a file exists of that name, it will be written over.\n\nWell, is it there?\n\n\n::: {.cell}\n```{webr}\nlist.files(\"data\")\n```\n:::\n\n\nYou can also directly save R objects directly which can be read back into R \nlater. This is done using the `saveRDS`{.r} function\n\n::: {.cell}\n```{webr}\nsaveRDS(xesoph, file = \"data/xesoph.rds\")   \nsaveRDS(iih, file = \"data/iih.rds\")  \n```\n:::\n\n\nYou can see what objects are in your R session with the `ls`{.r} function:\n\n::: {.cell}\n```{webr}\nls()  \n```\n:::\n\n\nYou can remove objects from your R session using `rm`{.r}:\n\n\n::: {.cell}\n```{webr}\nrm(xesoph)\nrm(iih)\n```\n:::\n\n\nCheck that they are gone with `ls`{.r}:\n\n::: {.cell}\n```{webr}\nls()  \n```\n:::\n\n\nAnd then read them back in using `readRDS`:\n\n::: {.cell}\n```{webr}\nxesoph <- readRDS(\"data/xesoph.rds\")      \niih <- readRDS(\"data/iih.rds\")  \n```\n:::\n\n\nOk, are they back?\n\n::: {.cell}\n```{webr}\nls()\n```\n:::\n\n\nI often use these functions in conjunction with `file.exists` to cache long \noperations so that I don't have to wait for them to finish every time I run my \ncode. Here's an example of that pattern:\n\n\n::: {.cell}\n```{webr}\nif(!file.exists(\"data/iih.rds\")) {\n  print(\"doing a time consuming task...\")\n  saveRDS(iih, file = \"data/iih.rds\") \n} else {\n  print(\"loading cached data...\")\n  iih <- readRDS(\"data/iih.rds\")\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}